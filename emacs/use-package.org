#+TITLE: use-package
#+AUTHOR: lujun9972
#+CATEGORY: emacs
#+DATE: [2015-10-11 日 07:13]
#+OPTIONS: ^:{}

* 基本使用方式
最简单的使用方法是:
#+BEGIN_SRC emacs-lisp
(use-package foo)
#+END_SRC
当 foo package 存在时,加载它. 若不存在,则在*Messages* 发出提醒

** :init
可以使用`:init'关键字来指明 package 加载前要执行哪些代码.
#+BEGIN_SRC emacs-lisp
(use-package foo
  :init
  (setq foo-variable t))
#+END_SRC

** :config
使用`:config'关键字来指明 package 加载后要执行的代码. `:config'关键字能正确处理延迟加载的情况
#+BEGIN_SRC emacs-lisp
(use-package foo
  :init
  (setq foo-variable t)
  :config
  (foo-mode 1))
#+END_SRC

** :commands
使用`:commands'关键字可以设置需要将哪些命令变为 autoload
#+BEGIN_SRC emacs-lisp
(use-package color-moccur
  :commands (isearch-moccur isearch-all)
  :bind ("M-s O" . moccur))                       ;autoload the commands isearch-moccur and isearch-all from color-moccur.el
#+END_SRC

** :bind
使用`:bind'关键字可以创建 autoload 并设置建绑定.
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
#+END_SRC
上面的代码做两件事:
1. 将 ace-jump-mode 变为 autoload
2. 设置 ~C-.~ 绑定为 ace-jump-mode 命令

下面的代码的效果与上面代码一样
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :commands ace-jump-mode                    ;autoload ace-jump-mode
  :init
  (bind-key "C-." 'ace-jump-mode))            ; set keybinding
#+END_SRC

`:bind'还可以接受一个或多个 cons
#+BEGIN_SRC emacs-lisp
(use-package hi-lock
  :bind (("M-o l" . highlight-lines-matching-regexp)
         ("M-o r" . highlight-regexp)
         ("M-o w" . highlight-phrase)))
#+END_SRC

** :mode 与:interpreter
可以使用`:mode'与`:interpret'关键字来修改`auto-mode-alist'和`interpreter-mode-alist'的值.

参数值可以是一个 cons cell,或 list 或字符串. 例如
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby")

;; The package is "python" but the mode is "python-mode":
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
#+END_SRC

** :defer
默认情况下,若用到了 :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, 和 :interpreter 这些关键字,则 use-package 会默认延迟加载 package.

但若没有用到这些关键字,而又想延迟加载 package,则需要使用`:defer'关键字
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :defer t
  :init
  (autoload 'ace-jump-mode "ace-jump-mode" nil t)
  (bind-key "C-." 'ace-jump-mode))
#+END_SRC

`:defer'关键字还能接受数字 N 作为参数, 表示 N 秒 idle 后,自动加载指定 package

** :demand
使用`:demand'关键字可以立即加载指定 package,即使该 package 已经被(显示或隐式地)设置为 =:defer t=

** :if
`:if'关键字能够使你根据情况加载不同的配置
#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t))
#+END_SRC

** :disabled
`:disabled'关键字能够暂时屏蔽对 package 的设置

** :load-path
使用`:load-path'关键字添加加载路径. 该关键字能接受 symbol,function,string 或 string 列表
#+BEGIN_SRC emacs-lisp
(use-package ess-site
  :load-path "site-lisp/ess/lisp/"
  :commands R)
#+END_SRC

** :diminish
若安装了 diminish 包,则通过`:diminish'关键字,可以替代或去掉 minor-mode 在 mode-line 上的提示信息.

可以接受的参数为:minior-mode symbol,或一个由 symbol 与替代显示字符串组成的 cons cell. 或者仅仅就一个字符串(这时 use-package 根据 package 名称推测 minor-mode)

** :ensure
`:ensure'关键字会使得 package 在不存在时,自动使用 package.el 下载缺失的 package.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

若需要安装的包名称与配置的包名称不相同,也可以明确指定要安装的包名称
#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex)
#+END_SRC

若想让所有的 use-package 都默认开启该功能,则可以设置`use-package-always-ensure'为 t

** `:pin'
开启自动下载后,若多个安装源有同名的 package,则可以使用`:pin'来指定安装源
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :pin melpa-stable)
#+END_SRC

但若参数为 *manual*. 则表示手工安装
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  ;; ignore org-mode from upstream and use a manually installed version
  :pin manual)
#+END_SRC

** :preface
`:preface'关键字有两个作用
1. 它包含的代码会在编译期执行
2. 它代码中定义的函数和变量,可以在`:if'中使用
* 关于 Byte-compiling
Another feature of use-package is that it always loads every file that it can when .emacs is being byte-compiled. This helps to silence spurious warnings about
unknown variables and functions.

However, there are times when this is just not enough. For those times, use the :defines and :functions keywords to introduce dummy variable and function
declarations solely for the sake of the byte-compiler:
#+BEGIN_SRC emacs-lisp
(use-package texinfo
  :defines texinfo-section-list
  :commands texinfo-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.texi$" . texinfo-mode)))
#+END_SRC


If you need to silence a missing function warning, you can use :functions:
#+BEGIN_SRC emacs-lisp

(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :functions inf-ruby-keys
  :config
  (defun my-ruby-mode-hook ()
    (require 'inf-ruby)
    (inf-ruby-keys))

  (add-hook 'ruby-mode-hook 'my-ruby-mode-hook))

#+END_SRC

Normally, use-package will load each package at compile time before compiling the configuration, to ensure that any necessary symbols are in scope to satisfy the
byte-compiler. At times this can cause problems, since a package may have special loading requirements, and all that you want to use use-package for is to add a
configuration to the eval-after-load hook. In such cases, use the :no-require keyword, which implies :defer:
#+BEGIN_SRC emacs-lisp
(use-package foo
  :no-require t
  :config
  (message "This is evaluated when `foo' is loaded"))
#+END_SRC
* 如何添加/修改 keyword
** 添加关键字
往`use-package-keywords'中添加新关键字.
注意: *use-package-keywords 中的关键字顺序决定了,每个关键字的生效顺序*
** 创建 normalizer
创建名为`use-package-normalize/:NEW-KEYWORD'的函数.

normalizer 函数的目的清理参数列表. 它接受一个参数列表,并将其转换成另一个参数列表. 并且该参数列表 should appear in the final property list used by use-package
#+BEGIN_SRC emacs-lisp
(defun use-package-normalize/:pin (name-symbol keyword args)
  (use-package-only-one (symbol-name keyword) args
    (lambda (label arg)
      (cond
       ((stringp arg) arg)
       ((symbolp arg) (symbol-name arg))
       (t
        (use-package-error
         ":pin wants an archive name (a string)"))))))
#+END_SRC
** 创建一个 handler
创建名为`use-package-handler/:NEW-KEYWORD'的函数. 该函数返回一个由配置语句组成的 list,里面的配置语句是实际生效的配置语句.
#+BEGIN_SRC emacs-lisp
(defun use-package-handler/:pin (name-symbol keyword archive-name rest state)
  (let ((body (use-package-process-keywords name-symbol rest state)))
    ;; This happens at macro expansion time, not when the expanded code is
    ;; compiled or evaluated.
    (if (null archive-name)
        body
      (use-package-pin-package name-symbol archive-name)
      (use-package-concat
       body
       `((push '(,name-symbol . ,archive-name)
               package-pinned-packages))))))
#+END_SRC

handler 函数通过两种方式影响后续 handler 函数对 keyword 的处理方式
1. 修改`state' plist. 这样后续 handler 函数可以通过检查`state'的值进行不同的处理
2. Then, once the remaining keywords have been handled and their resulting forms returned, the handler may manipulate, extend, or just ignore those forms
3.
