基于 Dubbo 框架构建分布式服务

Dubbo 是 Alibaba 开源的分布式服务框架，我们可以非常容易地通过 Dubbo 来构建
分布式服务，并根据自己实际业务应用场景来选择合适的集群容错模式，这个对于很多应用
都是迫切希望的，只需要通过简单的配置就能够实现分布式服务调用，也就是说服务提供方
（Provider）发布的服务可以天然就是集群服务，比如，在实时性要求很高的应用场景下，
可能希望来自消费方（Consumer）的调用响应时间最短，只需要选择 Dubbo 的
Forking Cluster 模式配置，就可以对一个调用请求并行发送到多台对等的提供方
（Provider）服务所在的节点上，只选择最快一个返回响应的，然后将调用结果返回给
服务消费方（Consumer），显然这种方式是以冗余服务为基础的，需要消耗更多的资源，
但是能够满足高实时应用的需求。

有关 Dubbo 服务框架的简单使用，可以参考我的其他两篇文章
（《Dubbo 实现 RPC 调用使用入门》，《基于 Dubbo 的 Hessian 协议实现远程调用》，
后面参考链接中已给出链接），这里主要围绕 Dubbo 分布式服务相关配置的使用来说明与
实践。

* Dubbo 服务集群容错

假设我们使用的是单机模式的 Dubbo 服务，如果在服务提供方（Provider）发布服务以后，
服务消费方（Consumer）发出一次调用请求，恰好这次由于网络问题调用失败，那么我们
可以配置服务消费方重试策略，可能消费方第二次重试调用是成功的（重试策略只需要配置
即可，重试过程是透明的）；但是，如果服务提供方发布服务所在的节点发生故障，那么
消费方再怎么重试调用都是失败的，所以我们需要采用集群容错模式，这样如果单个服务
节点因故障无法提供服务，还可以根据配置的集群容错模式，调用其他可用的服务节点，
这就提高了服务的可用性。

首先，根据 Dubbo 文档，我们引用文档提供的一个架构图以及各组件关系说明，如下所示：
[[dubbo-cluster-architecture.png]]

上述各个组件之间的关系（引自 Dubbo 文档）说明如下：

1、这里的 Invoker 是 Provider 的一个可调用 Service 的抽象，Invoker 封装了
Provider 地址及 Service 接口信息。

2、Directory 代表多个 Invoker，可以把它看成 List，但与 List 不同的是，它的值
可能是动态变化的，比如注册中心推送变更。

3、Cluster 将 Directory 中的多个 Invoker 伪装成一个 Invoker，对上层透明，
伪装过程包含了容错逻辑，调用失败后，重试另一个。

4、Router 负责从多个 Invoker 中按路由规则选出子集，比如读写分离，应用隔离等。

5、LoadBalance 负责从多个 Invoker 中选出具体的一个用于本次调用，选的过程包含了
负载均衡算法，调用失败后，需要重选。

我们也简单说明目前 Dubbo 支持的集群容错模式，每种模式适应特定的应用场景，可以
根据实际需要进行选择。Dubbo 内置支持如下 6 种集群模式：

** 1、Failover Cluster 模式

配置值为 failover。这种模式是 Dubbo 集群容错默认的模式选择，调用失败时，会自动
切换，重新尝试调用其他节点上可用的服务。对于一些幂等性操作可以使用该模式，如
读操作，因为每次调用的副作用是相同的，所以可以选择自动切换并重试调用，对调用者
完全透明。可以看到，如果重试调用必然会带来响应端的延迟，如果出现大量的重试调用，
可能说明我们的服务提供方发布的服务有问题，如网络延迟严重、硬件设备需要升级、程序
算法非常耗时，等等，这就需要仔细检测排查了。

例如，可以这样显式指定 Failover 模式，或者不配置则默认开启 Failover 模式，
配置示例如下：

#+BEGIN_EXAMPLE
<dubbo:service interface="org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService" version="1.0.0"
     cluster="failover" retries="2" timeout="100" ref="chatRoomOnlineUserCounterService" protocol="dubbo" >
     <dubbo:method name="queryRoomUserCount" timeout="80" retries="2" />
</dubbo:service>
#+END_EXAMPLE

上述配置使用 Failover Cluster 模式，如果调用失败一次，可以再次重试 2 次调用，
服务级别调用超时时间为 100ms，调用方法 queryRoomUserCount 的超时时间为 80ms，
允许重试 2 次，最坏情况调用花费时间 160ms。
如果该服务接口 org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService 还有其他
的方法可供调用，则其他方法没有显式配置则会继承使用 dubbo:service 配置的属性值。

** 2、Failfast Cluster 模式

配置值为 failfast。这种模式称为快速失败模式，调用只执行一次，失败则立即报错。
这种模式适用于非幂等性操作，每次调用的副作用是不同的，如写操作，比如交易系统我们
要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起下订单操作
请求（另一个新的订单）。

** 3、Failsafe Cluster 模式
配置值为 failsafe。失败安全模式，如果调用失败， 则直接忽略失败的调用，而是要
记录下失败的调用到日志文件，以便后续审计。

** 4、Failback Cluster 模式
配置值为 failback。失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。

** 5、Forking Cluster 模式
配置值为 forking。并行调用多个服务器，只要一个成功即返回。通常用于实时性要求
较高的读操作，但需要浪费更多服务资源。

** 6、Broadcast Cluster 模式
配置值为 broadcast。广播调用所有提供者，逐个调用，任意一台报错则报错
（2.1.0 开始支持）。通常用于通知所有提供者更新缓存或日志等本地资源信息。

上面的 6 种模式都可以应用于生产环境，我们可以根据实际应用场景选择合适的集群容错
模式。如果我们觉得 Dubbo 内置提供的几种集群容错模式都不能满足应用需要，也可以
定制实现自己的集群容错模式，因为 Dubbo 框架给我提供的扩展的接口，只需要实现
接口 com.alibaba.dubbo.rpc.cluster.Cluster 即可，接口定义如下所示：

#+BEGIN_EXAMPLE
@SPI(FailoverCluster.NAME)
public interface Cluster {

    /**
     * Merge the directory invokers to a virtual invoker.
     * @param <T>
     * @param directory
     * @return cluster invoker
     * @throws RpcException
     */
    @Adaptive
    <T> Invoker<T> join(Directory<T> directory) throws RpcException;

}
#+END_EXAMPLE

关于如何实现一个自定义的集群容错模式，可以参考 Dubbo 源码中内置支持的集群容错
模式的实现，6 种模式对应的实现类如下所示：

#+BEGIN_EXAMPLE
com.alibaba.dubbo.rpc.cluster.support.FailoverCluster
com.alibaba.dubbo.rpc.cluster.support.FailfastCluster
com.alibaba.dubbo.rpc.cluster.support.FailsafeCluster
com.alibaba.dubbo.rpc.cluster.support.FailbackCluster
com.alibaba.dubbo.rpc.cluster.support.ForkingCluster
com.alibaba.dubbo.rpc.cluster.support.AvailableCluster
#+END_EXAMPLE

可能我们初次接触 Dubbo 时，不知道如何在实际开发过程中使用 Dubbo 的集群模式，
后面我们会以 Failover Cluster 模式为例开发我们的分布式应用，再进行详细的介绍。

* Dubbo 服务负载均衡

Dubbo 框架内置提供负载均衡的功能以及扩展接口，我们可以透明地扩展一个服务或
服务集群，根据需要非常容易地增加/移除节点，提高服务的可伸缩性。Dubbo 框架内置
提供了 4 种负载均衡策略，如下所示：

** Random LoadBalance：
随机策略，配置值为 random。可以设置权重，有利于充分利用服务器的资源，高配的可以
设置权重大一些，低配的可以稍微小一些

** RoundRobin LoadBalance：
轮询策略，配置值为 roundrobin。

** LeastActive LoadBalance：
配置值为 leastactive。根据请求调用的次数计数，处理请求更慢的节点会受到更少的请求

** ConsistentHash LoadBalance：
一致性 Hash 策略，具体配置方法可以参考 Dubbo 文档。相同调用参数的请求会发送到
同一个服务提供方节点上，如果某个节点发生故障无法提供服务，则会基于一致性 Hash
算法映射到虚拟节点上（其他服务提供方）

在实际使用中，只需要选择合适的负载均衡策略值，配置即可，下面是上述四种负载均衡
策略配置的示例：

#+BEGIN_EXAMPLE
<dubbo:service interface="org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService" version="1.0.0"
     cluster="failover" retries="2" timeout="100" loadbalance="random"
     ref="chatRoomOnlineUserCounterService" protocol="dubbo" >
     <dubbo:method name="queryRoomUserCount" timeout="80" retries="2" loadbalance="leastactive" />
</dubbo:service>
#+END_EXAMPLE

上述配置，也体现了 Dubbo 配置的继承性特点，也就是 dubbo:service 元素配置了
loadbalance=”random”，则该元素的子元素 dubbo:method 如果没有指定负载均衡策略，
则默认为 loadbalance=”random”，否则如果 dubbo:method 指定了
loadbalance=”leastactive”，则使用子元素配置的负载均衡策略覆盖了父元素指定的策略
（这里调用 queryRoomUserCount 方法使用 leastactive 负载均衡策略）。

当然，Dubbo 框架也提供了实现自定义负载均衡策略的接口，可以实现
com.alibaba.dubbo.rpc.cluster.LoadBalance 接口，接口定义如下所示：

#+BEGIN_EXAMPLE
/**
* LoadBalance. (SPI, Singleton, ThreadSafe)
*
* <a href="http://en.wikipedia.org/wiki/Load_balancing_(computing)">Load-Balancing</a>
*
* @see com.alibaba.dubbo.rpc.cluster.Cluster#join(Directory)
* @author qian.lei
* @author william.liangf
*/
@SPI(RandomLoadBalance.NAME)
public interface LoadBalance {

     /**
     * select one invoker in list.
     * @param invokers invokers.
     * @param url refer url
     * @param invocation invocation.
     * @return selected invoker.
     */
    @Adaptive("loadbalance")
     <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;

}
#+END_EXAMPLE

如何实现一个自定义负载均衡策略，可以参考 Dubbo 框架内置的实现，
如下所示的 3 个实现类：

#+BEGIN_EXAMPLE
com.alibaba.dubbo.rpc.cluster.loadbalance.RandomLoadBalance
com.alibaba.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance
com.alibaba.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance
#+END_EXAMPLE

* Dubbo 服务集群容错实践

手机应用是以聊天室为基础的，我们需要收集用户的操作行为，然后计算聊天室中在线
人数，并实时在手机应用端显示人数，整个系统的架构如图所示：
[[dubbo-services-architecture.png]]

上图中，主要包括了两大主要流程：日志收集并实时处理流程、调用读取实时计算结果
流程，我们使用基于 Dubbo 框架开发的服务来提供实时计算结果读取聊天人数的功能。
上图中，实际上业务接口服务器集群也可以基于 Dubbo 框架构建服务，就看我们想要构建
什么样的系统来满足我们的需要。

如果不使用注册中心，服务消费方也能够直接调用服务提供方发布的服务，这样需要
服务提供方将服务地址暴露给服务消费方，而且也无法使用监控中心的功能，这种方式
成为直连。

如果我们使用注册中心，服务提供方将服务发布到注册中心，而服务消费方可以通过注册
中心订阅服务，接收服务提供方服务变更通知，这种方式可以隐藏服务提供方的细节，包括
服务器地址等敏感信息，而服务消费方只能通过注册中心来获取到已注册的提供方服务，
而不能直接跨过注册中心与服务提供方直接连接。这种方式的好处是还可以使用监控中心
服务，能够对服务的调用情况进行监控分析，还能使用 Dubbo 服务管理中心，方便管理
服务，我们在这里使用的是这种方式，也推荐使用这种方式。使用注册中心的 Dubbo 分布
式服务相关组件结构，如下图所示：
[[dubbo-services-internal-architecture.png]]

下面，开发部署我们的应用，通过如下 4 个步骤来完成：

** 服务接口定义

服务接口将服务提供方（Provider）和服务消费方（Consumer）连接起来，服务提供方实现
接口中定义的服务，即给出服务的实现，而服务消费方负责调用服务。我们接口中给出了
2 个方法，一个是实时查询获取当前聊天室内人数，另一个是查询一天中某个/某些聊天室
中在线人数峰值，接口定义如下所示：

#+BEGIN_EXAMPLE
package org.shirdrn.dubbo.api;

import java.util.List;

public interface ChatRoomOnlineUserCounterService {

     String queryRoomUserCount(String rooms);

     List<String> getMaxOnlineUserCount(List<String> rooms, String date, String dateFormat);
}
#+END_EXAMPLE

接口是服务提供方和服务消费方公共遵守的协议，一般情况下是服务提供方将接口定义好后
提供给服务消费方。

** 服务提供方

服务提供方实现接口中定义的服务，其实现和普通的服务没什么区别，我们的实现类为
ChatRoomOnlineUserCounterServiceImpl，代码如下所示：

#+BEGIN_EXAMPLE
package org.shirdrn.dubbo.provider.service;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService;
import org.shirdrn.dubbo.common.utils.DateTimeUtils;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

import com.alibaba.dubbo.common.utils.StringUtils;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;

public class ChatRoomOnlineUserCounterServiceImpl implements ChatRoomOnlineUserCounterService {

     private static final Log LOG = LogFactory.getLog(ChatRoomOnlineUserCounterServiceImpl.class);
     private JedisPool jedisPool;
     private static final String KEY_USER_COUNT = "chat::room::play::user::cnt";
     private static final String KEY_MAX_USER_COUNT_PREFIX = "chat::room::max::user::cnt::";
     private static final String DF_YYYYMMDD = "yyyyMMdd";

     public String queryRoomUserCount(String rooms) {
          LOG.info("Params[Server|Recv|REQ] rooms=" + rooms);
          StringBuffer builder = new StringBuffer();
          if(!Strings.isNullOrEmpty(rooms)) {
               Jedis jedis = null;
               try {
                    jedis = jedisPool.getResource();
                    String[] fields = rooms.split(",");
                    List<String> results = jedis.hmget(KEY_USER_COUNT, fields);
                    builder.append(StringUtils.join(results, ","));
               } catch (Exception e) {
                    LOG.error("", e);
               } finally {
                    if(jedis != null) {
                         jedis.close();
                    }
               }
          }
          LOG.info("Result[Server|Recv|RES] " + builder.toString());
          return builder.toString();
     }

     @Override
     public List<String> getMaxOnlineUserCount(List<String> rooms, String date, String dateFormat) {
          // HGETALL chat::room::max::user::cnt::20150326
          LOG.info("Params[Server|Recv|REQ] rooms=" + rooms + ",date=" + date + ",dateFormat=" + dateFormat);
          String whichDate = DateTimeUtils.format(date, dateFormat, DF_YYYYMMDD);
          String key = KEY_MAX_USER_COUNT_PREFIX + whichDate;
          StringBuffer builder = new StringBuffer();
          if(rooms != null && !rooms.isEmpty()) {
               Jedis jedis = null;
               try {
                    jedis = jedisPool.getResource();
                    return jedis.hmget(key, rooms.toArray(new String[rooms.size()]));
               } catch (Exception e) {
                    LOG.error("", e);
               } finally {
                    if(jedis != null) {
                         jedis.close();
                    }
               }
          }
          LOG.info("Result[Server|Recv|RES] " + builder.toString());
          return Lists.newArrayList();
     }

     public void setJedisPool(JedisPool jedisPool) {
          this.jedisPool = jedisPool;
     }

}
#+END_EXAMPLE

代码中通过读取 Redis 中数据来完成调用，逻辑比较简单。对应的 Maven POM 依赖配置，
如下所示：

#+BEGIN_EXAMPLE
<dependencies>
     <dependency>
          <groupId>org.shirdrn.dubbo</groupId>
          <artifactId>dubbo-api</artifactId>
          <version>0.0.1-SNAPSHOT</version>
     </dependency>
     <dependency>
          <groupId>org.shirdrn.dubbo</groupId>
          <artifactId>dubbo-commons</artifactId>
          <version>0.0.1-SNAPSHOT</version>
     </dependency>
     <dependency>
          <groupId>redis.clients</groupId>
          <artifactId>jedis</artifactId>
          <version>2.5.2</version>
     </dependency>
     <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-pool2</artifactId>
          <version>2.2</version>
     </dependency>
     <dependency>
          <groupId>org.jboss.netty</groupId>
          <artifactId>netty</artifactId>
          <version>3.2.7.Final</version>
     </dependency>
</dependencies>
#+END_EXAMPLE

有关对 Dubbo 框架的一些依赖，我们单独放到一个通用的 Maven Module 中
（详见后面“附录：Dubbo 使用 Maven 构建依赖配置”），这里不再多说。服务提供方
实现，最关键的就是服务的配置，因为 Dubbo 基于 Spring 来管理配置和实例，所以通过
配置可以指定服务是否是分布式服务，以及通过配置增加很多其它特性。我们的配置文件为
provider-cluster.xml，内容如下所示：

#+BEGIN_EXAMPLE
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
     xmlns:p="http://www.springframework.org/schema/p"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

     <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
          <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
          <property name="ignoreResourceNotFound" value="true" />
          <property name="locations">
               <list>
                    <value>classpath*:jedis.properties</value>
               </list>
          </property>
     </bean>

     <dubbo:application name="chatroom-cluster-provider" />
     <dubbo:registry address="zookeeper://zk1:2181?backup=zk2:2181,zk3:2181" />

     <dubbo:protocol name="dubbo" port="20880" />

     <dubbo:service interface="org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService" version="1.0.0"
          cluster="failover" retries="2" timeout="1000" loadbalance="random" actives="100" executes="200"
          ref="chatRoomOnlineUserCounterService" protocol="dubbo" >
          <dubbo:method name="queryRoomUserCount" timeout="500" retries="2" loadbalance="roundrobin" actives="50" />
     </dubbo:service>

     <bean id="chatRoomOnlineUserCounterService" class="org.shirdrn.dubbo.provider.service.ChatRoomOnlineUserCounterServiceImpl" >
          <property name="jedisPool" ref="jedisPool" />
     </bean>

     <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
          <constructor-arg index="0">
               <bean class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
                    <property name="maxTotal" value="${redis.pool.maxTotal}" />
                    <property name="maxIdle" value="${redis.pool.maxIdle}" />
                    <property name="minIdle" value="${redis.pool.minIdle}" />
                    <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
                    <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
                    <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
                    <property name="testWhileIdle" value="true" />
               </bean>
          </constructor-arg>
          <constructor-arg index="1" value="${redis.host}" />
          <constructor-arg index="2" value="${redis.port}" />
          <constructor-arg index="3" value="${redis.timeout}" />
     </bean>

</beans>
#+END_EXAMPLE

上面配置中，使用 dubbo 协议，集群容错模式为 failover，服务级别负载均衡策略为
random，方法级别负载均衡策略为 roundrobin（它覆盖了服务级别的配置内容），其他
一些配置内容可以参考 Dubbo 文档。我们这里是从 Redis 读取数据，所以使用了 Redis
连接池。

启动服务示例代码如下所示：

#+BEGIN_EXAMPLE
package org.shirdrn.dubbo.provider;

import org.shirdrn.dubbo.provider.common.DubboServer;

public class ChatRoomClusterServer {

     public static void main(String[] args) throws Exception {
          DubboServer.startServer("classpath:provider-cluster.xml");
     }

}
#+END_EXAMPLE

上面调用了 DubboServer 类的静态方法 startServer，如下所示：

#+BEGIN_EXAMPLE
public static void startServer(String config) {
     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(config);
     try {
          context.start();
          System.in.read();
     } catch (IOException e) {
          e.printStackTrace();
     } finally {
          context.close();
     }
}
#+END_EXAMPLE

方法中主要是初始化 Spring IoC 容器，全部对象都交由容器来管理。

** 服务消费方

服务消费方就容易了，只需要知道注册中心地址，并引用服务提供方提供的接口，消费方
调用服务实现如下所示：

#+BEGIN_EXAMPLE
package org.shirdrn.dubbo.consumer;

import java.util.Arrays;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService;
import org.springframework.context.support.AbstractXmlApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ChatRoomDubboConsumer {

     private static final Log LOG = LogFactory.getLog(ChatRoomDubboConsumer.class);

     public static void main(String[] args) throws Exception {
          AbstractXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:consumer.xml");
          try {
               context.start();
               ChatRoomOnlineUserCounterService chatRoomOnlineUserCounterService
                   = (ChatRoomOnlineUserCounterService) context.getBean("chatRoomOnlineUserCounterService");
               getMaxOnlineUserCount(chatRoomOnlineUserCounterService);
               getRealtimeOnlineUserCount(chatRoomOnlineUserCounterService);
               System.in.read();
          } finally {
               context.close();
          }

     }

     private static void getMaxOnlineUserCount(ChatRoomOnlineUserCounterService liveRoomOnlineUserCountService) {
          List<String> maxUserCounts = liveRoomOnlineUserCountService.getMaxOnlineUserCount(
                    Arrays.asList(new String[] {
                                      "1482178010" ,
                                      "1408492761",
                                      "1430546839",
                                      "1412517075",
                                      "1435861734"}),
                                  "20150327",
                                  "yyyyMMdd");
          LOG.info("After getMaxOnlineUserCount invoked: maxUserCounts= " + maxUserCounts);
     }

     private static void getRealtimeOnlineUserCount(ChatRoomOnlineUserCounterService liveRoomOnlineUserCountService)
               throws InterruptedException {
          String rooms = "1482178010,1408492761,1430546839,1412517075,1435861734";
          String onlineUserCounts = liveRoomOnlineUserCountService.queryRoomUserCount(rooms);
          LOG.info("After queryRoomUserCount invoked: onlineUserCounts= " + onlineUserCounts);
     }
}
#+END_EXAMPLE

对应的配置文件为 consumer.xml，内容如下所示：

#+BEGIN_EXAMPLE
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

     <dubbo:application name="chatroom-consumer" />
     <dubbo:registry address="zookeeper://zk1:2181?backup=zk2:2181,zk3:2181" />

     <dubbo:reference
             id="chatRoomOnlineUserCounterService"
             interface="org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService" version="1.0.0">
         <dubbo:method name="queryRoomUserCount" retries="2" />
     </dubbo:reference>

</beans>
#+END_EXAMPLE

也可以根据需要配置 dubbo:reference 相关的属性值，也可以配置 dubbo:method 指定
调用的方法的配置信息，详细配置属性可以参考 Dubbo 官方文档。

** 部署与验证

开发完成提供方服务后，在本地开发调试的时候可以怎么简单怎么做，如果是要部署到
生产环境，则需要打包后进行部署，可以参考下面的 Maven POM 配置：

#+BEGIN_EXAMPLE
<build>
     <plugins>
          <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-shade-plugin</artifactId>
               <version>1.4</version>
               <configuration>
                    <createDependencyReducedPom>true</createDependencyReducedPom>
               </configuration>
               <executions>
                    <execution>
                         <phase>package</phase>
                         <goals>
                              <goal>shade</goal>
                         </goals>
                         <configuration>
                              <transformers>
                                   <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                                   <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        <mainClass>org.shirdrn.dubbo.provider.ChatRoomClusterServer</mainClass>
                                   </transformer>
                              </transformers>
                         </configuration>
                    </execution>
               </executions>
          </plugin>
     </plugins>
</build>
#+END_EXAMPLE

这里也给出 Maven POM 依赖的简单配置：

#+BEGIN_EXAMPLE
<dependencies>
     <dependency>
          <groupId>org.shirdrn.dubbo</groupId>
          <artifactId>dubbo-api</artifactId>
          <version>0.0.1-SNAPSHOT</version>
     </dependency>
</dependencies>
#+END_EXAMPLE

我们开发的服务应该是分布式的，首先是通过配置内容来决定，例如设置集群模式、设置负
载均衡模式等，然后在部署的时候，可以在多个节点上同一个服务，这样多个服务都会注册
到 Dubbo 注册中心，如果某个节点上的服务不可用了，可以根据我们配置的策略来选择其
他节点上的可用服务，后面通过 Dubbo 服务管理中心和监控中心就能更加清楚明了。

* Dubbo 服务管理与监控

我们需要在安装好管理中心和监控中心以后，再将上面的开发的提供方服务部署到物理节点
上，然后就能够通过管理中心和监控中心来查看对应的详细情况。

** Dubbo 服务管理中心

安装 Dubbo 服务管理中心，需要选择一个 Web 容器，我们使用 Tomcat 服务器。
首先下载 Dubbo 管理中心安装文件 dubbo-admin-2.5.3.war，或者直接从源码构建得到该
WAR 文件。这里，我们已经构建好对应的 WAR 文件，然后进行安装，执行如下命令：

#+BEGIN_SRC bash
cd apache-tomcat-6.0.35
rm -rf webapps/ROOT
unzip ~/dubbo-admin-2.5.3.war -d webapps/ROOT
#+END_SRC

修改配置文件~/apache-tomcat-6.0.35/webapps/ROOT/WEB-INF/dubbo.properties，指定
我们的注册中心地址以及登录密码，内容如下所示：

#+BEGIN_EXAMPLE
dubbo.registry.address=zookeeper://zk1:2181?backup=zk2:2181,zk3:2181
dubbo.admin.root.password=root
dubbo.admin.guest.password=guest
#+END_EXAMPLE

然后，根据需要修改~/apache-tomcat-6.0.35/conf/server.xml 配置文件，主要是
Tomcat HTTP 端口号（我这里使用 8083 端口），完成后可以直接启动 Tomcat 服务器：

#+BEGIN_SRC bash
cd ~/apache-tomcat-6.0.35/
bin/catalina.sh start
#+END_SRC

然后访问地址 http://10.10.4.130:8083/ 即可，根据配置文件指定的 root 用户密码，
就可以登录 Dubbo 管理控制台。

我们将上面开发的服务提供方服务，部署到 2 个独立的节点上
（192.168.14.1 和 10.10.4.125），然后可以通过 Dubbo 管理中心查看对应服务的状况，
如图所示：
[[dubbo-admin-providers.png]]

上图中可以看出，该服务有两个独立的节点可以提供，因为配置的集群模式为 failover，
如果某个节点的服务发生故障无法使用，则会自动透明地重试另一个节点上的服务，这样就
不至于出现拒绝服务的情况。如果想要查看提供方某个节点上的服务详情，可以点击对应的
IP:Port 链接，示例如图所示：
[[dubbo-admin-providers-detail.png]]

上图可以看到服务地址：

#+BEGIN_EXAMPLE
dubbo://10.10.4.125:20880/org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService?actives=100&anyhost=true&application=chatroom-cluster-provider&cluster=failover&dubbo=0.0.1-SNAPSHOT&executes=200&interface=org.shirdrn.dubbo.api.ChatRoomOnlineUserCounterService&loadbalance=random&methods=getMaxOnlineUserCount,queryRoomUserCount&pid=30942&queryRoomUserCount.actives=50&queryRoomUserCount.loadbalance=leastactive&queryRoomUserCount.retries=2&queryRoomUserCount.timeout=500&retries=2&revision=0.0.1-SNAPSHOT&side=provider&timeout=1000×tamp=1427793652814&version=1.0.0
#+END_EXAMPLE

如果我们直接暴露该地址也是可以的，不过这种直连的方式对服务消费方不是透明的，如果
以后 IP 地址更换，也会影响调用方，所以最好是通过注册中心来隐蔽服务地址。同一个
服务所部署在的多个节点上，也就对应对应着多个服务地址。另外，也可以对已经发布的
服务进行控制，如修改访问控制、负载均衡相关配置内容等，可以通过上图中 “消费者”
查看服务消费方调用服务的情况，如图所示：
[[dubbo-admin-consumers.png]]

也在管理控制台可以对消费方进行管理控制。

** Dubbo 监控中心

Dubbo 监控中心是以 Dubbo 服务的形式发布到注册中心，和普通的服务时一样的。例如，
我这里下载了 Dubbo 自带的简易监控中心文件
dubbo-monitor-simple-2.5.3-assembly.tar.gz，
可以解压缩以后，修改配置文件
~/dubbo-monitor-simple-2.5.3/conf/dubbo.properties
的内容，如下所示：

#+BEGIN_EXAMPLE
dubbo.container=log4j,spring,registry,jetty
dubbo.application.name=simple-monitor
dubbo.application.owner=
dubbo.registry.address=zookeeper://zk1:2181?backup=zk2:2181,zk3:2181
dubbo.protocol.port=7070
dubbo.jetty.port=8087
dubbo.jetty.directory=${user.home}/monitor
dubbo.charts.directory=${dubbo.jetty.directory}/charts
dubbo.statistics.directory=${user.home}/monitor/statistics
dubbo.log4j.file=logs/dubbo-monitor-simple.log
dubbo.log4j.level=WARN
#+END_EXAMPLE

然后启动简易监控中心，执行如下命令：

#+BEGIN_SRC bash
cd ~/dubbo-monitor-simple-2.5.3
bin/start.sh
#+END_SRC

这里使用了 Jetty Web 容器，访问地址 http://10.10.4.130:8087/ 就可以查看监控中心，
Applications 选项卡页面包含了服务提供方和消费方的基本信息，如图所示：
[[dubbo-monitor-applications.png]]

上图主要列出了所有提供方发布的服务、消费方调用、服务依赖关系等内容。
接着，查看 Services 选项卡页面，包含了服务提供方提供的服务列表，如图所示：
[[dubbo-monitor-services.png]]

点击上图中 Providers 链接就能看到服务提供方的基本信息，包括服务地址等，如图所示：
[[dubbo-monitor-providers.png]]

点击上图中 Consumers 链接就能看到服务消费方的基本信息，包括服务地址等，如图所示：
[[dubbo-monitor-consumers.png]]

由于上面是 Dubbo 自带的一个简易监控中心，可能所展现的内容并不能满足我们的需要，
所以可以根据需要开发自己的监控中心。Dubbo 也提供了监控中心的扩展接口，如果想要
实现自己的监控中心，可以实现接口
com.alibaba.dubbo.monitor.MonitorFactory
和
com.alibaba.dubbo.monitor.Monitor，
其中 MonitorFactory 接口定义如下所示：

#+BEGIN_SRC java
/**
* MonitorFactory. (SPI, Singleton, ThreadSafe)
*
* @author william.liangf
*/
@SPI("dubbo")
public interface MonitorFactory {

    /**
     * Create monitor.
     * @param url
     * @return monitor
     */
    @Adaptive("protocol")
    Monitor getMonitor(URL url);

}
#+END_SRC

Monitor 接口定义如下所示：

#+BEGIN_SRC java
/**
* Monitor. (SPI, Prototype, ThreadSafe)
*
* @see com.alibaba.dubbo.monitor.MonitorFactory#getMonitor(com.alibaba.dubbo.common.URL)
* @author william.liangf
*/
public interface Monitor extends Node, MonitorService {

}
#+END_SRC

具体定义内容可以查看 MonitorService 接口，不再累述。

* 总结

Dubbo 还提供了其他很多高级特性，如路由规则、参数回调、服务分组、服务降级等等，
而且很多特性在给出内置实现的基础上，还给出了扩展的接口，我们可以给出自定义的
实现，非常方便而且强大。更多可以参考 Dubbo 官网用户手册和开发人员手册。

* 附录：Dubbo 使用 Maven 构建依赖配置

#+BEGIN_EXAMPLE
<properties>
	<spring.version>3.2.8.RELEASE</spring.version>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>

<dependencies>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>dubbo</artifactId>
		<version>2.5.3</version>
		<exclusions>
			<exclusion>
				<groupId>org.springframework</groupId>
				<artifactId>spring</artifactId>
			</exclusion>
			<exclusion>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
			</exclusion>
			<exclusion>
				<groupId>org.jboss.netty</groupId>
				<artifactId>netty</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-beans</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-web</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.6.2</version>
	</dependency>
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.16</version>
	</dependency>
	<dependency>
		<groupId>org.javassist</groupId>
		<artifactId>javassist</artifactId>
		<version>3.15.0-GA</version>
	</dependency>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>hessian-lite</artifactId>
		<version>3.2.1-fixed-2</version>
	</dependency>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>fastjson</artifactId>
		<version>1.1.8</version>
	</dependency>
	<dependency>
		<groupId>org.jvnet.sorcerer</groupId>
		<artifactId>sorcerer-javac</artifactId>
		<version>0.8</version>
	</dependency>
	<dependency>
		<groupId>org.apache.zookeeper</groupId>
		<artifactId>zookeeper</artifactId>
		<version>3.4.5</version>
	</dependency>
	<dependency>
		<groupId>com.github.sgroschupf</groupId>
		<artifactId>zkclient</artifactId>
		<version>0.1</version>
	</dependency>
	<dependency>
		<groupId>org.jboss.netty</groupId>
		<artifactId>netty</artifactId>
		<version>3.2.7.Final</version>
	</dependency>
</dependencies>
#+END_EXAMPLE

* 参考链接

[[http://alibaba.github.io/dubbo-doc-static/User+Guide-zh.htm][User+Guide-zh]]
[[http://alibaba.github.io/dubbo-doc-static/Developer+Guide-zh.htm][Developer+Guide-zh]]
[[http://coolshell.cn/articles/4787.html][HTTP幂等性概念和应用]]
[[http://shiyanjun.cn/archives/349.html][基于Dubbo的Hessian协议实现远程调用]]
[[http://shiyanjun.cn/archives/341.html][Dubbo实现RPC调用使用入门]]
