#+TITLE: 断言、异常和错误码的用途

断言、异常和错误码（或者 Maybe 类型）是三种用途：
1. 断言是「绝对不应该出现的错误」，如果出现了，表明是你的代码有 bug 。换言之，断言的作用是辅助 debug
2. 异常是「不太可能出现，出现了我也不太能继续处理」的问题，比如内存不够了，网络断了
3. 错误码是「不希望它出现，但出现了我也应该要处理」的问题，比如错误的用户输入



从程序执行流本身来看，异常的意义在于回滚调用栈。

如果你不确定是不是该上异常处理，那就判断一下此时是不是想把调用栈回滚到某个状态前。一个用异常处理的绝佳例子是 visitor 设计模式，当递归 visit 到某一个节点发生错误时，显然把 error code 穿过层层递归跟等于 nil 的 result 一起传回来是个非常蠢的做法（你甚至得给每一种节点类型的 visit 函数都写一遍 if err return ！ shit ！）


从业务逻辑上来看，异常处理机制是用来统一处理某封闭模块在各个阶段产生的同类错误用的

比如游戏读图，在每个关卡我要读不同的地图文件，文件读上来以后要解析数据结构，有可能读图失败，有可能结构不对，出错了以后我想让游戏回退到选图界面，那我肯定没理由在写游戏逻辑的地方还判断 loadNextStage()成功了没有，抛出异常可以让更上层的逻辑来处理同时打断游戏逻辑，其实还是对应回调用栈回滚的本质


