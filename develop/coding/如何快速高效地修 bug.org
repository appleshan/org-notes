#+TITLE: 如何快速高效地修 bug？

@See https://blog.lilydjwg.me/2017/1/6/how-to-fix-bugs-quickly.208166.html

看到知乎上的一个问题，心血来潮，随意写写，请读者不要太较真。

看回答，有一些可操作性很强的答案。但是呢，你知道的，考试好不代表能力强，如果你只是学习别人的方法而并不理解，那么学来之后只会是东施效颦而不能融会贯通。所以呢，我也来发表一下自己的见解。

首先，你要定位 bug。这时，你需要：

注重逻辑性。不要做没有证据的结论。如果你有猜测，就去证实或者否定它。比如某次，同事代码返回的数据有问题，认为是缓存用的 Redis 有问题，返回了错误的数据。然而没人去对此猜测进行求证……我去确认了一下，Redis 收到了请求，并且响应正常。接下来，排除所有其它可能的原因之后，最后剩下的那个就是真相。真相就是，代码里有个 } 的位置放错了，因为它刚好在一屏之后的位置，所以没有人发现……（是 Vim 帮我找到的）
基本的方法论。比如二分法。比如最小化测试用例。如果你要提问，要懂得提问的智慧，不管是向搜索引擎还是向人，你都需要提出正确的问题。
知识面。你写 Web 后端的话，普通的 HTTP 得懂，浏览器的开发者工具得会用。简单的 JavaScript 也有会点儿。简单地说就是，你要精于你自己主攻的部分，然后要熟悉你的上下游。再比如如果你使用 CPython 的话，你要准备一份 CPython 的源码，并且要能够流畅地阅读 C 代码。
工具。工欲善其事，必先利其器。一大堆调试用的工具，你至少得知道它们能干什么，需要的时候能用。比如 strace、lsof、gdb、git bisect，还有高级点的 sysdig、systemtap、perf 等等。当然还有一堆不是专门为调试而设计的通用工具，比如 the silver searcher 或者 ripgrep。一个快速的全文搜索工具能帮你在最短时间内找到相关的代码或者日志。你不必成为正则表达式大师，但是简单的一定要会，不然面对上千个匹配结果你要怎么办呢？Vim 有一个插件 Mark，能够同时高亮多个模式，非常利于调试期间阅读代码和日志。投入时间学习使用高效的工具，不要把时间浪费在等待和人工搜索上，也不要让自己忙于琐事而断了灵感和线索。
最后，不要不断地、毫无目的地换个环境啦，换个版本啦，换个用户啦，这样子找问题。如果这样做很有效的话，大家都去买彩票去了。

找到 bug 之后，理解它是如何产生的。当你理解之后才能真正修好它。就像你感冒了吃抗生素，根本没有用。

