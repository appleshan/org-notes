#+TITLE: Python 开发环境预备

* 以 pyenv 及 pipenv + autoenv 的方式开发 Python
所涉及到的工具有：

- pyenv : 版本管理
- pipenv : 开发工作流管理
- autoenv : 基于目录的环境自动构建

* Python 版本管理 - pyenv
Pyenv 是一种可以实现安装不同版本 Python 并可在不同版本间任意切换的管理工具。

* Python 项目的环境及包管理 - pipenv
Pipenv 是 python 项目中的包管理工具，通过 pipenv 安装的 pyhon 包将被记录于
pipfile 当中，方便项目中包的依赖管理及安装部署;
Pipenv 工具是集 pip, pipfile, virtualenv 于一身，故它也实现了项目目录的虚拟环境
创建，使得其项目的运行环境能够满足独立且隔离，不受系统及其他环境的影响;

** pipenv 的使用
前提：假设我们在用户目录 ~ 下有一个项目叫 my_project。

我们首先进入项目目录：
#+BEGIN_EXAMPLE
$ cd ~/my_project
#+END_EXAMPLE

进入项目以后，如果直接执行 pipenv install，pipenv 会根据系统默认的 python 版本，
来创建虚拟环境。前提是本项目中不存在已有的 Pipfile，如果有，它会去根据 Pipfile
安装对应的版本和 Pipfile 中记录的依赖库。

但是我们一般会创建虚拟环境的时候指定 python 版本,就需要配上 --two 或者--three 这
个参数:

- --two 使用 python2 来创建虚拟环境，需要确保系统中存在 python2 版本
- --three 使用 python3 来创建虚拟环境，需要确保系统中存在 python3 版本

#+BEGIN_EXAMPLE
$ pipenv install --three
#+END_EXAMPLE

下面是执行后的输出信息：

#+BEGIN_EXAMPLE
Creating a virtualenv for this project…
Using /usr/local/bin/python3 to create virtualenv…

# 这里可以看到继承自哪个 python 版本
⠋Running virtualenv with interpreter /usr/local/bin/python3 Using base prefix '/usr/local'
New python executable in /root/.local/share/virtualenvs/my_project-dhpIKgdN/bin/python3
Also creating executable in /root/.local/share/virtualenvs/my_project-dhpIKgdN/bin/python
Installing setuptools, pip, wheel...done.

# 这里可以看到虚拟环境安装的位置
Virtualenv location: /root/.local/share/virtualenvs/my_project-dhpIKgdN
Creating a Pipfile for this project…
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
Updated Pipfile.lock (625834)!
Installing dependencies from Pipfile.lock (625834)…
  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00
To activate this project's virtualenv, run the following:
 $ pipenv shell # 要激活该虚拟环境，执行这条指令
#+END_EXAMPLE

这将在项目目录中创建两个新文件 Pipfile 和 Pipfile.lock：

- Pipfile 存放着当前虚拟环境的配置信息。
  包含 python 版本，pypi 源，以及项目安装的依赖库。
  pipenv 根据这个来寻找项目的根目录。
  Pipfile 文件是 TOML 格式而不是 requirements.txt 那样的纯文本。
  一个项目对应一个 Pipfile，支持开发环境与正式环境区分。默认提供 default 和
  development 区分。
- Pipfile.lock 顾名思义，这个文件时对于 Pipfile 的一个锁定。
  支持锁定项目不同的版本所依赖的环境。

激活虚拟环境, 在当前目录执行下面的指令即可：

#+BEGIN_EXAMPLE
$ pipenv shell
#+END_EXAMPLE

** 更新 pypi 源来提高依赖库安装的速度
在使用 pipenv 的时候，常常会在安装的时候，一直卡在了 Locking 这里，通过加上 -v
参数，可以看到安装过程中的步骤信息，卡在了下载那里，这时应该可以意识到是因为网络
的原因，pipenv 创建的 Pipfile 中默认的 pypi 源是 python 官方的
[https://pypi.python.org/simple]。我们国内用户访问下载的时候会很慢。

所以，我一般会在创建好 Pipfile 以后，修改到文件中 source 块下的 url 字段，设置为
国内的 pypi 源就好了，我推荐的是清华的 pypi 源，具体设置如下：

#+BEGIN_EXAMPLE
[[source]]
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
verify_ssl = true
name = "pypi"
#+END_EXAMPLE

备注：我还没有找到如何修改能在创建时就设好的方法，应该修改源码是可以的，但这样不
尊重源码，毕竟高墙是我们自己筑起的，如果有好的方法，您不妨在评论中告诉我一下。

** 管理 Python 依赖关系
Pipfile 包含关于项目的依赖包的信息，并取代通常在 Python 项目中使用的
requirements.txt 文件。 如果你之前的项目中存在 requirements.txt 文件，pipenv 可
以很轻松的安装 requirements.txt 中的依赖包。

#+BEGIN_EXAMPLE
pipenv install -r requirements.txt
# 或者
pipenv install --requirements requirements.txt
#+END_EXAMPLE

可以通过更新 Pipfile.lock 来冻结软件包名称及其版本以及其自己的依赖关系的列表。这
时需要使用 lock 关键字来完成，

#+BEGIN_EXAMPLE
$ pipenv lock
#+END_EXAMPLE

如果我们想要在虚拟环境中安装某个指定的库，比如 requests, 直接在 install 后面跟上
就可以了:

#+BEGIN_EXAMPLE
$ pipenv install requests
#+END_EXAMPLE

如果想查看当前环境中第三方包之间的依赖关系,可以通过 pipenv graph 来查看：

#+BEGIN_EXAMPLE
[root@VM_27_243_centos my_project]# pipenv graph
requests==2.18.4
  - certifi [required: >=2017.4.17, installed: 2018.1.18]
  - chardet [required: <3.1.0,>=3.0.2, installed: 3.0.4]
  - idna [required: <2.7,>=2.5, installed: 2.6]
  - urllib3 [required: <1.23,>=1.21.1, installed: 1.22]
#+END_EXAMPLE

从输出可以看出，我们按照的 requests 包，依赖于其他的四个包，pipenv 帮你自动管理
着这些包这件的依赖关系、。我们可以看到 requests 依赖于 urllib3， 假设我们再安装
一个包，并且这个包也同样依赖着 urllib3 ,当我们要卸载掉 requests 的时候，pipenv
会自动检测这些包之间的依赖关系，因为 urllib3 依旧有其他包依赖，所以会保留，只会
卸载掉其他的依赖库。
卸载的指令是 pipenv uninstall。

** 退出虚拟环境
任何时候想退出虚拟环境，只需一条简单的 exit 指令即可
#+BEGIN_EXAMPLE
$ exit
#+END_EXAMPLE

** 使用体验
近期的项目中，我开始尝试着从 virtualenv 管理 python 虚拟环境，切换到用 pipenv 来
管理。经过一段时间的使用，着实觉得 pipenv 使用的更加顺手，更加的便捷。这当然也延
续了 Kenneth 大神一贯的项目作风-- For Humans。再配合上 autoenv，更加的完善！

* Python 项目环境的自启动 - autoenv
autoenv 可以实现在进入项目目录时，将自启动需要的运行环境;

1 . 安装 autoenv
使用 pip 方式安装存在问题，会导致 terminal 异常退出，之后的版本可能会有更新;
目前是以 git 方式进行安装：
#+BEGIN_EXAMPLE
$ git clone git://github.com/kennethreitz/autoenv.git ~/.autoenv
$ echo 'source ~/.autoenv/activate.sh' >> ~/.bashrc
#+END_EXAMPLE

2 . 创建.env 文件
在已有的 pipenv 项目中运行 pipenv shell,
会得到虚拟环境路径信息，通过信息创建.env 运行环境文件;
#+BEGIN_EXAMPLE
$ echo "source /home/{userName}/.local/share/virtualenvs/{projectName}/bin/activate" > {projectName}/.env
#+END_EXAMPLE

3 . 再次进入项目目录，将自启动该项目的虚拟环境

更好的使用方法参考本笔记 repo 中的《[[./python 的 autoenv 使用简明手册.org][python 的 autoenv 使用简明手册]]》。

* 参考资料
- https://jiangink.github.io/2018/01/28/PythonEnv/
- https://vimiix.com/post/2018/03/11/manage-your-virtualenv-with-pipenv/
