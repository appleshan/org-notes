#+TITLE:rtcp.py 使用场景

* 使用场景
A 服务器在内网，公网无法直接访问这台服务器，但是 A 服务器可以联网访问公网的 B 服务器
（假设 IP 为 222.2.2.2）。
我们也可以访问公网的 B 服务器。我们的目标是访问 A 服务器的 22 端口。那么可以这样：
1. 在 B 服务器上运行：
./rtcp.py l:10001 l:10002
表示在本地监听了 10001 与 10002 两个端口，这样，这两个端口就可以互相传输数据了。
2. 在 A 服务器上运行：
./rtcp.py c:localhost:22 c:222.2.2.2:10001
表示连接本地的 22 端口与 B 服务器的 10001 端口，这两个端口也可以互相传输数据了。
3. 然后我们就可以这样来访问 A 服务器的 22 端口了：
ssh 222.2.2.2 -p 10002

原理很简单，这个命令执行后，B 服务器的 10002 端口接收到的任何数据都会传给 10001 端口，
此时，A 服务器是连接了 B 服务器的 10001 端口的，数据就会传给 A 服务器，最终进入 A 服
务器的 22 端口。

* 图示
#+BEGIN_SRC plantuml :file ./rtcp.png
node A_Server [
A 服务器
----
内网
====
./rtcp.py c:localhost:22 c:222.2.2.2:10001
....
连接本地的 22 端口与 B 服务器的 10001 端口
]
node B_Server [
B 服务器
----
公网 IP:222.2.2.2
====
./rtcp.py l:10001 l:10002
....
本地监听了 10001 与 10002 两个端口
]
node C_Server [
C 服务器
====
ssh 222.2.2.2 -p 10002
....
可以访问 A 服务器的 22 端口
]

A_Server -up-> B_Server
C_Server -up-> B_Server
#+END_SRC

#+results:
[[file:./rtcp.png]]
