#+TITLE: Python 之虚拟环境管理

* 问题
Python 本身有很多个版本，第三方的 Python 包又有很多可用的版本，所以经常会遇到下
面的问题：
- 运行不同的 Python 程序，需要使用不同版本的 Python（2.x 或 3.x）.
- 在同一中 Python 版本中，可能需要用到不同版本的第三方包，例如：Django 1.6 或者
  Django 1.7

对于上面的问题，已经有很多现成的个工具可以解决。根据解决上面问题的方法，这些工具
大概可以分为两类：
- Python 版本环境切换工具
- 特定 Python 版本虚拟环境切换工具

* 现有工具及介绍
下面看看现在流行的虚拟环境工具，以及简单的介绍。

** Python 版本环境切换工具
Python 版本环境切换工具的作用就是让多个不同版本的 Python 可以在系统上共存。并且
提供简单的命令来支持不同 Python 版本之间的切换。
| 工具   | 介绍                                                                                                  |
|--------+-------------------------------------------------------------------------------------------------------|
| pyenv  | 目前最流行的 python 版本环境切换工具，但是不支持 Windows                                              |
| pywin  | Windows 上 pyenv 的替代品，但是功能相对 pyenv 比较少                                                  |
| py.exe | Python 3.3 版本以后 Windows 系统自带的启动工具（Python Launcher for Windows），可以直接在命令行中使用 |

** 特定 Python 版本虚拟环境切换工具
简单的说，虚拟环境切换工具就是可以根据当前使用的 Python 版本环境来创建多个虚拟的
Python 环境。这些虚拟的环境之间相互独立，可以安装各个环境所需的 Python 包。

| 工具                  | 介绍                                                                                              |
|-----------------------+---------------------------------------------------------------------------------------------------|
| virtualenv            | 目前最流行的 python 虚拟环境配置工具                                                              |
| virtualenvwrapper     | 使用 shell 开发，是对 virtualenv 的一个封装，简化了 virtualenv 命令的使用，并且进行了一些功能扩展 |
| virtualenvwrapper-win | 使用 Windows batch shell 开发的 virtualenvwrapper                                                 |
| venv                  | Python 3.3 版本以后自带的虚拟环境工具，仅支持 python 3.3 和以后版本                               |
