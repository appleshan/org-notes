#+STARTUP: indent
Emacs 编辑环境

* 第 1 部分: 学习 Emacs 的基础知识
** 表 1. 常用的缺省 Emacs 按键前缀

C-c      当前编辑模式特有的命令
C-x      文件和缓冲区命令
C-h      帮助命令
M-x      函数名称

** 表 2. 常用的 Emacs 缓冲区和文件函数

绑定     函数名                   描述
C-x C-s  save-buffer              将当前的缓冲区保存到磁盘。
C-x s    save-some-buffers        要求将所有未保存的缓冲区保存到磁盘。
C-x C-c  save-buffers-kill-emacs  要求将所有未保存的缓冲区保存到磁盘，并退出 Emacs。
         save-buffers-kill-terminal
C-x C-z  suspend-emacs            挂起 Emacs 并使之成为一个后台进程。
         suspend-frame
C-x C-b  list-buffers             列出所有缓冲区。
         ibuffer
C-x b    switch-to-buffer         切换缓冲区。
         ido-switch-buffer
C-x k    kill-buffer              杀死一个缓冲区（缺省情况下为当前的缓冲区）。
         ido-kill-buffer
C-x C-q  vc-toggle-read-only      切换当前缓冲区的可读状态（如果适用还可以执行版本控制）。
         read-only-mode
C-x i    insert-file              在插入点插入某个文件的内容。
         ido-insert-file

** 表 3. 有用的 Emacs 键盘输入（用于移动和导航）

键盘输入         函数                    描述
C-p, UpArrow     previous-line           将插入点向上移动到上一行。
C-n, DownArrow   next-line               将插入点向下移动到下一行。
C-f, RightArrow  forward-char            将插入点移动到下一个字符。
C-b, LeftArrow   backward-char           将插入点移动到上一个字符。
M-f              forward-word            将插入点移动到下一个单词。
M-b              backward-word           将插入点移动到上一个单词。
C-v, PgDn        scroll-up               将文本向上滚动一屏。
                 cua-scroll-up
M-v, PgUp        scroll-down             将文本向下滚动一屏。
                 cua-scroll-down
Home             move-beginning-of-line  将插入点移到缓冲区的开始处。（在某些版本中，这个键被缺省定义为移动到当前行的开始处。）
End              move-end-of-line        将插入点移到缓冲区的末尾。（在某些版本中，这个键被缺省定义为移动到当前行的末尾。）
C-a              move-beginning-of-line  将插入点移到本行的开始处。
                 org-beginning-of-line
C-e              move-end-of-line        将插入点移到本行的结尾。
                 org-end-of-line
M-a              backward-sentence       将插入点移到句子的开始处。
                 org-backward-sentence
M-e              forward-sentence        将插入点移到句子的结尾处。
                 org-forward-sentence
M-{              backward-paragraph      将插入点移到段落的开始处。
M-}              forward-paragraph       将插入点移到段落的结尾处。

** 表 4. 常用 Emacs 编辑命令

键盘输入        函数                  描述
Ins             overwrite-mode        切换改写模式（缺省为关闭）。
Backspace       delete-backward-char  删除插入点前的字符。
            org-delete-backward-char
Del             delete-forward-char   删除插入点后的字符。
C-d             delete-char           删除插入点处的字符。
            org-delete-char
M-d             kill-word             从插入点开始向前删除字符，直到单词末尾。
M-Backspace,
M-Delete        backward-kill-word    从插入点开始向回删除字符，直至单词的开始处。
C-_, C-/        undo-tree-undo        撤消您的上一次键入或操作
C-q 字符 或 XXX quoted-insert         在插入点插入按键本身代表的字符或由八进制数字（XXX）表示的字符。
C-u 次数命令    universal-argument    按总的次数（缺省为 4 次）连续执行命令。

** 表 5. 用来标记和删除文本的 Emacs 函数

键盘输入             函数                描述
C-@, C-., C-Space    cua-set-mark          在插入点设置标记。
C-k                  kill-line             删除从插入点到行末的所有文本。
                 org-kill-line
C-w, S-delete        kill-region           删除区域。
whole-line-or-region-kill-region
M-w                  kill-ring-save        将区域保存在 kill ring 中，但不删除它。
whole-line-or-region-kill-ring-save
C-y                  yank                  恢复来自 kill ring 的文本。
whole-line-or-region-yank

** 表 6. Emacs 中的鼠标操作

鼠标命令  描述
B1        这一命令将设置插入点位置；拖动鼠标左键以设置区域。
B1-B1     这一命令标记一个单词。
B1-B1-B1  这一命令标记一行。
B2        这一命令插入最近被杀死的内容，并把光标移动到插入内容的末尾。
B3        这一命令会设置并突出显示区域，然后无需删除就将其放在 kill 缓冲区中。如果某个区域已经被突出显示并设置，该区域的末尾将移动到您单击的位置。
B3-B3     这个命令将突出显示区域，然后删除它。如果某个区域已经被突出显示并设置，该区域的末尾将移动到您单击的位置，此后该区域将被删除。

* 第 2 部分: 学习 Emacs 的基本模式和编辑特性
** 表 3. Emacs 文本操作命令

绑定	          命令或者函数	           描述
C-x C-i、C-x Tab  indent-rigidly	   这一命令对区域中的（或光标所在的）行进行缩进。
                  fill-region	           这一命令填充区域里的所有段落。
M-q	          fill-paragraph	   这一命令填充光标所在的单个段落。
M-\	          delete-horizontal-space  这一命令删除光标左右的任何水平间距。
C-o	          open-line	           这一命令以垂直间距在光标下方打开一个新行，而不移动光标。
        sanityinc/open-line-with-reindent
C-t	          transpose-chars	   这一命令调换光标左右的单个字符。
M-t	          transpose-words	   这一命令调换光标左右的单个单词。
              org-transpose-words
C-x C-t	          transpose-lines	   这一命令调换光标所在的行与光标前面的行。
M-^	          delete-indentation	   这一命令将光标所在的行和前面的行连接起来。以 C-1 作为开始，以连接光标所在的行和下一 行。
M-u	          upcase-word              这一命令将光标处到其所在词的词尾之间的文本转换为大写字母。
M-l	          downcase-word	           这一命令将光标处到其所在词的词尾之间的文本转换为小写字母。
C-x C-u	          upcase-region	           这一命令将区域中的内容转换为大写字母。
C-x C-l	          downcase-region	   这一命令将区域中的内容转换为小写字母。

** 表 4. Emacs 的 query-replace 函数的选项

键	  描述
空格、y	  替换这个匹配。
Del、n	  跳过这一匹配到下一个匹配。
Enter、q  退出 query-replace。
.	  进行本次替换，然后退出 query-replace。
，	  进行本次替换，将光标移动到此处，然后退出 query-replace。
C-r	  指定递归编辑。
C-w	  删除这个匹配并递归编辑。
C-l	  重绘屏幕，并使这一行位于屏幕正中位置。
!	  继续进行所有的替换，而无需再次询问。
E	  编辑替换的字符串。
^	  退回到前一次替换。

** 表 5. Emacs 搜索和替换命令

绑定	                  命令或者函数	           描述
C-s [字符串] [C-w] [C-y]   isearch-forward	   前向增量地在整个缓冲区中搜索字符串（在缺省情况下，将
                                                   搜索您上一次给出的搜索字符串，如果存在），C-w 使用从
                                                   光标处到光标所在单词的词尾之间的文本，以及 C-y 使用
                                                   从光标处到光标所在行的行尾之间的全部内容。
C-r [字符串] [C-w] [C-y]   isearch-backward	   后向增量地在整个缓冲区中搜索字符串（在缺省情况下，将搜索
                                                   您上一次给出的搜索字符串，如果存在），C-w 使用从光标处
                                                   到光标所在单词的词尾之间的文本，C-y 使用从光标处到光标
                                                   所在行的行尾之间的全部内容。
C-s Enter C-w 单词或者短语  word-search-forward	   在整个缓冲区中前向搜索给定的单词或者短语（不管它们之间如何分隔）。
C-r Enter C-w 单词或者短语  word-search-backward	   在整个缓冲区中后向搜索给定的单词或者短语（不管它们之间如何分隔）。
C-M-s	                  isearch-forward-regexp   在整个缓冲区中前向增量搜索给定的正则表达式。
C-M-r	                  isearch-backward-regexp  在整个缓冲区中后向增量搜索给定的正则表达式。
                          replace-string	   从光标处到缓冲区末尾搜索给定的字符串，并使用给定的字符串来替换它。
                          replace-regexp	   从光标处到缓冲区末尾搜索给定的正则表达式，并使用给定的字符串来替换它。
M-%	                  query-replace	           从光标处到缓冲区末尾搜索给定的字符串，对于搜索到的每个实例，
                                                   询问（如表 4 中所述）是否使用给定的字符串来进行替换。
C-M-%	                  query-replace-regexp	   从光标处到缓冲区末尾搜索给定的正则表达式，对于搜索到的每个
                                                   实例，询问（如表 4 中所述）是否使用给定的字符串来进行替换。

** 表 6. Ispell 单词替换命令

键	描述
字符	使用以（字符）开头的替换建议。
空格	在此上下文中接受这个单词作为更正。
i	接受这个单词作为更正并将其插入到个人字典文件。
a	仅对于此次 Emacs 会话接受这个单词作为更正。
A	仅对于此次 Emacs 会话中的缓冲区，接受这个单词作为更正。
r	使用您输入的字符串替换这个单词（Ispell 会再次进行拼写检查）。
R	使用您输入的字符串替换这个单词（Ispell 会再次进行拼写检查），并对整个缓冲区的剩余部分运行 query-replace。
l	使用给定的字符串替换这个单词，并在给定的字典文件中查找这个新的字符串。
u	将这个单词的小写形式插入到个人字典文件。
m	使用给定的字符串替代这个单词，将其保存到个人字典，然后再次对该单词进行拼写检查。
C-l	使当前行位于屏幕中心位置。
C-r	进入一个递归编辑。
C-z	挂起 Emacs。（In X 窗口系统中，这个操作将对 Emacs 客户端窗口进行图标化。）
x	退出拼写检查，并将光标移回到它的原始位置。
X	退出拼写检查，并使光标位于它当前所在的位置。
q	立刻结束拼写检查。
?	显示选项菜单。

** 表 7. Flyspell 模式的键绑定

绑定	                                 描述
M-$	                                 使用 Ispell 纠正最近一个拼写错误的单词。
M-x flyspell-auto-correct-word，M-Tab	 根据 Ispell 给出的修改建议，自动地纠正最近一个拼写错误的单词。
M-x flyspell-auto-correct-previous-word	 根据 Ispell 给出的修改建议，自动地纠正前面拼写错误的单词。
M-x flyspell-correct-word，B2	         显示单词建议的弹出菜单。

** 表 8. Emacs 的拼写命令

绑定	命令或者函数	描述
M-$	ispell-word	调用 Ispell 以检查光标处单词的拼写。
        ispell-region	调用 Ispell 以检查某一区域中的拼写。
        ispell-buffer	调用 Ispell 以检查从光标处到缓冲区末尾的所有单词的拼写。
        flyspell-mode	在您输入内容的同时，调用 Ispell 以便在后台检查缓冲区中所有单词的拼写，突出显示所有的拼写错误。

* 第 3 部分: 高级 Emacs 文本操作
** 表 1. 使用矩形区块的 Emacs 命令

键盘输入	 功能	                描述
C-space	 set-mark-command	标记矩形区块的一个角（光标标记其相对的角）。
C-x r k	 kill-rectangle	        剪切当前的矩形区块，并将其保存在一个特殊的矩形区块缓冲区中。
C-x r d	 delete-rectangle	删除当前的矩形区块，并不为粘贴而保存它。
C-x r c	 clear-rectangle	清除当前的矩形区块，使用空白字符替换整个区域。
C-x r o	 open-rectangle	        打开当前的矩形区块，使用空白字符填充整个区域，并将该矩形区块的所有文本移动到右边。
C-x r y	 yank-rectangle	        在光标处，粘贴上一次剪切的矩形区块的内容，将所有的现有文本移动到右边。

** 表 2. 高级 Emacs 标记和选择命令

键盘输入	     功能	                描述
C-u C-space	 	                移动到标记环中的前一个标记。
C-x C-x	     exchange-point-and-mark	交换光标和标记的位置。
M-@	     mark-word	                标记从光标到当前词尾的所有文本。
M-h	     mark-paragraph	        标记当前段落，不管光标处在什么位置。
 	     transient-mark-mode	切换临时标记模式。
C-x h        mark-whole-buffer          标记整个缓冲区，不管光标处在什么位置。
M-B1	 	                        设置二次选择的开始，拖曳鼠标以进行二次选择。
M-B3	 	                        设置二次选择的结尾。
M-B1-B1	 	                        将一个单词标记为二次选择。
M-B1-B1-B1	 	                将一行标记为二次选择。

** 表 3. 高级 Emacs 剪切和粘贴命令

键盘输入	        功能	        描述
integer  C-k	kill-line	剪切行的整数 数目。如果是 0，剪切从光标到该行开头的全部内容；如果是负数，则反向剪切。
M-k	        kill-sentence	剪切从光标到句子的结尾处的内容。
M-z	        zap-to-char	删除从光标到指定的字符之间的所有文本。
 M-y	        yank-pop	移动到剪切环中的下一个槽位。
integer  C-y	yank	        粘贴剪切环中指定槽位的内容。

* 第 4 部分: 选项、寄存器和书签
** 表 1. 用于指定颜色的 Emacs 命令行选项

选项	                  描述
--foreground-color color
-fg color	          设置前景颜色为 color。
--background-color color
-bg color	          设置背景颜色为 color。
--border-color color
-bd color	          设置边框颜色为 color。
--cursor-color color
-cr color	          设置光标颜色为 color。
--mouse-style color
-ms color	          设置鼠标指针颜色为 color。

** 表 2. Emacs 命令行选项

选项	描述
--visit=filespec
--file=filespec
filespec	打开 filespec 到各自的缓冲区，以进行编辑。
+row[:column]	将光标移动到该文件中的 row 行和（可选的）水平位置 column 列（缺省值是 +1:1）。
--insert file
将文件 file 插入到缓冲区的开头。
--debug-init	对 .emacs 启动文件使用 Lisp 调试器。
--no-init-file
-q	不运行任何 .emacs 启动文件。
--no-site-file	不运行全局 site-start.el 文件。
-u user
--user user	使用用户 user 的 .emacs 启动文件。
--funcall function
-f function	执行 Emacs Lisp 函数。
--eval expression
--execute expression	执行 Emacs Lisp 表达式 expression。
--load file
-l file	执行文件 file 中的 Emacs Lisp 指令。
-batch
--batch	使用批处理（非交互）模式。
-kill
--kill	当处于批处理模式时，退出 Emacs。
--name name	使用 name 作为 Emacs X 客户端窗口的名称（缺省值是“emacs”）。
-T title
--title title	使用 title 作为 Emacs X 客户端窗口的标题（缺省值是 name@FQDN，其中 FQDN 是该主机的完全限定域名）。
--reverse-video
-r	使用反向显示方式，交换前景和背景的颜色。
--iconic
-iconic	启动 Emacs，并将其作为一个图标，而不是一个活动窗口。
--icon-type
-i	当图标化 Emacs 窗口时，使用 Emacs 图标（通常是 /usr/share/emacs/version/etc/gnu.xpm），而不是窗口管理器的任何缺省值。
-fn name
-font name	使用 name 作为 Emacs 窗口字体。
--border-width width
-bw width	将窗口边框设置为 width 像素。
--internal-border width
-ib width	将窗口内部边框设置为 width 像素。
--g dimensions
--geometry dimensions	根据给定的 X 窗口尺寸 dimensions（生成窗口的缺省值是 80x40 个字符）设置窗口的宽度、高度和位置。
--foreground-color color
-fg color	将前景色设置为 color。
--background-color color
-bg color	将背景色设置为 color。
--border-color color
-bd color	将边框颜色设置为 color。
--cursor-color color
-cr color	将光标颜色设置为 color。
--mouse-color color
-ms color	将鼠标指针颜色设置为 color。
-d name
--display name	在与 name 相对应的 X 显示器上打开 Emacs 窗口。
-nw
--no-windows	在 X 中，不使用 X 客户端窗口，而是在当前终端窗口中打开。这一选项不影响控制台会话。
-t file
--terminal file	将标准 I/O 重定向到文件 file，而不是终端。

** 表 3. 使用寄存器的 Emacs 命令

键盘输入	         功能	描述
C-x r space X    point-to-register	将光标保存到寄存器 X。
C-x r s X	 copy-to-register	将区域保存到寄存器 X。
C-x r r X	 copy-rectangle-to-register	将选定的矩形区块保存到寄存器 X。
未定义	         view-register	查看一个给定的寄存器的内容。
C-x r j X	 jump-to-register	将光标移动到寄存器 X 中给定的位置。
C-x r i X	 insert-register	在光标处插入寄存器 X 的内容。

** 表 4. 使用书签的 Emacs 命令

键盘输入	            功能	            描述
C-x r m Bookmark    bookmark-set	    设置一个名为 Bookmark 的书签。
C-x r l	            bookmarks-bmenu-list    列出所有已保存的书签。
bookmark-delete	                            删除一个书签。
C-x r b Bookmark    bookmark-jump	    跳转至名为 Bookmark 的书签中所设置的位置。
未定义	            bookmark-save	    将所有的书签保存到书签文件 ~/.emac.bmk 中。

* 第 5 部分: 确定您的 Emacs 视图的形状
** 表 1. Emacs 窗口移动命令汇总

功能	        描述
windmove-up	移动到正好位于当前窗口上方的窗口，如果该窗口存在的话。
windmove-down	移动到正好位于当前窗口下方的窗口，如果该窗口存在的话。
windmove-left	移动到正好位于当前窗口左边的窗口，如果该窗口存在的话。
windmove-right	移动到正好位于当前窗口右边的窗口，如果该窗口存在的话。

** 表 2. 常见的 Emacs 窗口操作命令

功能                                  绑定       描述
split-window-vertically	             C-x 2	从中间将当前窗口划分为两半，垂直地堆叠新的缓冲区。
switch-to-buffer-other-window	     C-x 4 b	垂直地将当前窗口划分为两半，提示输入缓冲区以使用底部的窗口，
                                                并将其作为活动窗口。
display-buffer	                     C-x 4 C-o	在另一个窗口中显示一个缓冲区，提示输入缓冲区以使用另一个窗口，
                                                但保持当前窗口为活动窗口。（如果仅存在一个窗口，
                                                那么垂直地划分该窗口以显示另一个缓冲区。）
find-file-other-window	             C-x 4 f	在新的缓冲区中打开新的文件，在新的垂直窗口中绘制它。
find-file-read-only-other-window     C-x 4 r	在一个新的只读缓冲区中打开新的文件，在新的垂直窗口中绘制它。
scroll-other-window	             C-M-v	滚动到下一个由 C-x o 切换到的窗口。
scroll-all		                        切换 scroll-all 次要模式。当它处于打开状态时，将同时
                                                滚动显示当前窗口中的缓冲区的所有窗口，并滚动均等的相应距离。
other-window	                     C-x o	将光标移动到下一个窗口，并使其成为活动窗口。
windmove-up                                     移动到恰好位于当前窗口上方的窗口，如果它存在的话。
windmove-down                                   移动到恰好位于当前窗口下方的窗口，如果它存在的话。
windmove-left                                   移动到恰好位于当前窗口左边的窗口，如果它存在的话。
windmove-right                                  移动到恰好位于当前窗口右边的窗口，如果它存在的话。
delete-window                        C-x 0	删除当前窗口，并将光标移动到使用 C-x o 将切换到的下一个窗口。
delete-other-windows                 C-x 1	删除当前窗口之外的所有窗口。
kill-buffer-and-window               C-x 4 0	删除当前窗口，并剪切它的缓冲区。
split-window-horizontally            C-x 3	将当前窗口从中间划分为两半，水平地堆叠新的缓冲区。
follow-mode		                        切换 follow 次要模式。当它在缓冲区中处于打开状态时，
                                                将所有显示该缓冲区的窗口连接为一个较大的虚拟窗口。
enlarge-window                       C-x ^	使当前窗口增加一行的高度；在其之前使用一个负数，
                                                将使得当前窗口减少一行的高度。
shrink-window-horizontally	     C-x }	使当前活动窗口减少一列的宽度。
enlarge-window-horizontally	     C-x {	使当前活动窗口增加一列的宽度。
shrink-window-if-larger-than-buffer  C-x -	将当前活动窗口的大小缩小到对于它所包含的缓冲区来说可能的最小尺寸。
balance-windows	                     C-x +	平衡所有窗口的尺寸，使它们的大小大致相等。
compare-windows		                        将当前窗口与下一个窗口进行比较，在两个窗口中从光标处开始比较，
                                                并在两个缓冲区中将光标移动到第一个不同的字符处，直到到达缓冲区的末尾为止。

** 表 3. 常见的 Emacs 框架操作命令

功能                              绑定	  描述
make-frame-command	         C-x 5 2  生成一个新的 Emacs 框架，并使其成为活动框架。
switch-to-buffer-other-frame	 C-x 5 b  在另一个框架中打开指定的缓冲区。如果不存在其他框架，则创建一个新的框架。
find-file-other-frame	         C-x 5 f  在另一个框架中打开指定的文件。如果不存在其他框架，则创建一个新的框架。
find-file-read-only-other-frame	 C-x 5 r  在另一个框架中的只读缓冲区中打开指定的文件。如果不存在其他框架，则创建一个新的框架。
other-frame	                 C-x 5 o  移动到下一个框架，并使其成为活动框架。
delete-frame	                 C-x 5 0  删除当前框架，并使下一个框架成为活动框架。
delete-other-frames	         C-x 5 1  删除当前框架之外的所有框架。
iconify-or-deiconify-frame	 C-z	  图标化当前框架。如果该框架已经图标化了，那么取消它的图标化。
                                          （在控制台中，这个绑定将挂起 Emacs。）

** 表 4. Emacs 鼠标指针躲避的类型

模式	         描述
animate	         只要光标靠近鼠标指针，就使得鼠标指针迅速地移动到该框架中的一个随机位置。
banish	         一旦您开始键入，就将鼠标指针驱逐到该窗口的右上角。
cat-and-mouse    用作 animate 的同义词。
exile	         仅当鼠标指针离光标太近时，将鼠标指针移动到该窗口的右上角（如同 banish）。一旦光标移开，将鼠标指针移回到它的原始位置。
jump	         当光标靠近鼠标指针时，使鼠标指针立刻跳到该框架中的一个随机位置。
none	         不提供鼠标躲避功能（缺省情况）。
proteus	         与 animate 中一样移动鼠标指针，但是就像希腊神话中的海神普罗特斯，更改鼠标指针的形状（使用一个随机图像字符）。

* 第 6 部分: 自定义您的 Emacs 环境
** 表 1. 常见 Emacs 变量汇总

变量	描述
auto-mode-alist	如果设置为 nil，那么将关闭根据文件名扩展自动选择主要模式的功能。它的缺省值是一些文件名扩展和相应模式的列表。
auto-save-default	如果没有将其设置为 nil，那么 Emacs 则根据预设的时间间隔，自动地将经过更改的缓冲区保存到相应的文件。它的缺省值是 t。
auto-save-interval	包含调用 Auto-save 模式（如果它被设置为“真”）之后经过更改的字符的数目，其缺省值是 300。
calendar-latitude	包含用户工作站位置的纬度值，采用度数表示；其缺省值是 nil。
calendar-longitude	包含用户工作站位置的经度值，采用度数表示；其缺省值是 nil。
calendar-location-name	包含用户工作站所在位置的位置名（如城市、州或省、国家/地区）的值，其缺省值是 nil。
colon-double-space	如果没有将其设置为 nil，那么填充文本的命令将在冒号后面插入两个 空格而不是一个。其缺省值是 nil。
command-line-args	包含在当前 Emacs 会话中所执行的命令行中使用的参数列表。
command-line-default-directory	包含执行当前 Emacs 会话的目录的路径名。
compare-ignore-case	如果没有将其设置为 nil，那么在运行 compare-windows 函数的时候，Emacs 将忽略大写字母和小写字母的区别，如在本系列文章的第 5 部分教程中所描述的（请参见参考资料）。其缺省值是 nil。
confirm-kill-emacs	如果设置为 nil，那么 Emacs 在退出的时候不请求确认；否则，可能自定义 Emacs Lisp 函数以完成退出验证工作，如 y-or-n-p（请参见使得简短的回答成为可能部分）。其缺省值是 nil。
default-justification	设置缺省的对齐风格。该值可能是 left、right、center、full 或者 none 中的一个。其缺省值是 left。
default-major-mode	为新的文件或者缓冲区选择缺省主要模式。其缺省值是 fundamental-mode。
display-time-24hr-format	如果设置为 t，那么 Emacs 将采用 24 小时军用格式来显示时间，而不是采用带有 AM 或者 PM 后缀的标准 12 小时格式。其缺省值是 nil。
display-time-day-and-date	如果没有将其设置为 nil，那么 Emacs 以当前星期几、当前月份和日期的格式来显示时间，而不仅仅显示小时和分钟。其缺省值是 nil。
fill-column	包含各行中的列数（从此处开始填充文本到下一行）。其缺省值是 70。
initial-major-mode	指定启动时用于 *scratch* 缓冲区的主要模式。其缺省值是 lisp-interaction-mode。
inverse-video	如果没有将其设置为 nil，那么 Emacs 将对显示的颜色取反（如果可能的话）。其缺省值是 nil。
kill-ring	包含 Emacs 剪切环的内容，如本系列文章的第 3 部分教程中所描述的（请参见参考资料）。
kill-ring-max	设置剪切环中所允许的条目数。其缺省值是 60。
kill-whole-line	如果没有将其设置为 nil，那么 kill-line 函数（绑定于 C-k）将剪切当前行以及 其尾部的换行符（如果是在该行的开头处执行这个函数）。其缺省值是 nil。
make-backup-files	如果没有将其设置为 nil，Emacs 将进行任何更改之前保存缓冲区的备份（使用相同的文件名，但在文件名后追加了波浪符 (~)）。
mark-ring	包含该缓冲区的当前标记环的内容，如本系列文章的第 3 部分教程中所描述的（请参见参考资料）。
mark-ring-max	包含标记环中所允许的条目数。其缺省值是 16。
mouse-avoidance-mode	包含描述 mouse-avoidance 模式类型的值，如本系列文章第 5 部分教程中所描述的（请参见参考资料）。其缺省值是 nil。
next-line-add-newline	如果没有将其设置为 nil，那么只要按下向下箭头键，Emacs 就会在该缓冲区的末尾添加一个新行。其缺省值是 nil（在更新的 Emac 版本中）。
scroll-bar-mode	包含 Emacs 框架侧边缘（放置滚动条的位置）的值：right 或 left。如果设置为 nil，则关闭滚动条。其缺省值是 left。
scroll-step	包含使用 scroll-down 和 scroll-up 函数（在缺省情况下，分别绑定于 PgDn 和 PgUp 键）在缓冲区中移动的行数。如果设置为 0，那么在滚动的时候，Emacs 使光标位于窗口的中心位置。
show-trailing-whitespace	如果没有将其设置为 nil，那么 Emacs 将显示当前缓冲区中的行尾处的任何空白字符。其缺省值是 nil。
visible-bell	如果没有将其设置为 nil，那么 Emacs 将使得该框架闪烁，而不是鸣响系统警铃。其缺省值是 nil。
x-cut-buffer-max	设置剪切环的字符的最大数目，该剪切环同样存储于 X Window System 的剪切缓冲区中。其缺省值是 20000。

** 表 2. 常见 Emacs 界面函数汇总

函数                      描述
column-number-mode       在模式行中，为光标所在的当前列（前面有一个 C）切换显示。其缺省值是 nil。
display-time	         在模式行中切换当前时间的显示。其缺省值是 nil。
font-lock-mode	         如果没有将其设置为 nil，那么 Emacs 将为当前缓冲区自动地打开 Font Lock 模式。其缺省值是 nil。
global-font-lock-mode    如果没有将其设置为 nil，那么 Emacs 将为所有的 缓冲区自动地打开 Font Lock 模式。其缺省值是 nil。
line-number-mode	 在模式行中，为光标所在的当前行（前面有一个 L）切换显示，其缺省值是 t。
menu-bar-mode	         切换 Emacs 菜单条的显示。其缺省值是 t。
sunrise-sunset	         根据当前地理位置，显示今天日出和日落的时间。如果在它的前面加上 universal-argument，那么这个函数将提示输入一个特定的日期。
tool-bar-mode	         切换 Emacs 工具条的显示。其缺省值是 t。

** 表 3. Emacs Customize 函数汇总

函数	                                描述
customize-changed-options Enterversion	为所有的外观、选项、或者自从通过 version 给定 Emacs 的版本之后
                                        经过更改的组，打开一个新的自定义缓冲区。
customize-customized	                为所有经过自定义但尚未保存到磁盘的选项和外观，打开一个新的自定义缓冲区。
customize-face Enter regexp	        为所有的外观、选项、或者与通过 regexp 给定的正则表达式相关的组，打开一个新的自定义缓冲区。
customize-face Enter face	        为通过 face 给定的外观名称，打开一个新的自定义缓冲区。
customize-group Enter group	        为通过 group 给定的组名称，打开一个新的自定义缓冲区。
customize-option Enter option	        为通过 option 给定的选项名称，打开一个新的自定义缓冲区。
customize-saved	为所有使用 Customize     函数更改的外观和选项，打开一个新的自定义缓冲区。

* 第 7 部分: 让 Emacs 帮助您走出困境
** 表 1. Emacs 键盘输入帮助命令汇总

键盘输入	          函数	                  描述
Tab		                          如果给出了某个命令的一部分，那么这个命令将执行命令完成功能，显示给定命令的所有可能的输入值。
command prefix
或者
keystroke C-h	                          这个命令用于描述给定命令前缀 或者键盘输入 的所有可能的命令和函数。
C-h c keystroke	  describe-key-briefly	  这个命令将在迷你缓冲区中报告与给定键盘输入 进行了绑定的函数名称。
C-h k keystroke	  describe-key	          这个命令将打开新的帮助缓冲区窗口，其中描述了与给定键盘输入进行了绑定的函数。
C-h l	          view-lossage	          这个命令将打开新的缓冲区，并显示最后键入的 100 个字符。
                  open-dribble-file       这个命令将打开指定的文件，并将所有键盘输入的副本记录到该文件。

** 表 2. Emacs 函数帮助命令汇总

键盘输入	        函数	                描述
                apropos	                对于一个给定的正则表达式，这个命令将给出 apropos 命令和变量的列表。
C-h a regexp	command-apropos	        对于给定的正则表达式，这个命令将给出 apropos 命令的列表。
C-h b	        describe-bindings	这个命令将在一个新的帮助缓冲区窗口中描述当前主要模式的所有有效的键绑定。
C-h f function	describe-function	这个命令将在一个新的帮助缓冲区窗口中描述给定函数 的用途。
C-h v variable	describe-variable	这个命令将在一个新的帮助缓冲区窗口中描述给定变量 的用途。
C-h w function	where-is	        这个命令将描述某个特定函数所绑定到的键盘输入（如果有的话）。

** 表 3. Emacs Info 模式命令汇总

键盘输入	   函数	                描述
H	   Info-help	        这个命令将在一个新的缓冲区中打开 Info 实践教程。
Q	   Info-exit	        这个命令将移动到您最后访问的缓冲区，并将 *info* 缓冲区放置于缓冲区列表的末尾。
Enter
或者
B2		                这个命令将沿着光标处、或者附近的交叉引用进行移动。
N	   Info-next	        这个命令将移动到当前节点的 Next 节点。
P	   Info-prev	        这个命令将移动到当前节点的 Previous 节点。
U	   Info-up	        这个命令将移动到当前节点的 Up 节点。
D	   Info-directory	这个命令将移动到 Directory 节点。
L	   Info-last	        这个命令将移动到您最后访问的节点。
T	   Info-top-node	这个命令将移动到当前文档的 Top 节点。
>	   Info-final-node	这个命令将移动到在当前文档中指向的最后一个节点。
空格	   Info-scroll-up	这个命令将在当前节点中向前移动一个屏幕；如果位于节点的末尾，那么将移动到它的 Next 节点。
Backspace  Info-scroll-down	这个命令将在当前节点中向后移动一个屏幕；如果位于节点的开头，那么移动到它的 Previous 节点。
B	   beginning-of-buffer	这个命令将转到当前节点的开头处。
S	   Info-search	        这个命令将在当前 Info 文档中向前搜索给定的正则表达式。
Tab	   Info-next-reference	这个命令将光标向前移动到第一个交叉引用处。
M-Tab	   Info-prev-reference	这个命令将光标向后移动到最后一个交叉引用处。

** 表 4. Emacs 文档说明文件汇总

键盘输入	   函数	                   文件名	                                描述
C-h C-d	   describe-distribution   DISTRIB	                                关于获得 Emacs 软件最新分发版副本的信息
C-h F	   view-emacs-faq	   /usr/share/info/emacs-mainversion/efaq.gz    Emacs FAQ
C-h C-c	   describe-copying	   COPYING	                                GNU 通用公共许可证 (GNU GPL)
C-h C-w	   describe-no-warranty	   COPYING                                      GNU 通用公共许可证 (GNU GPL) 的“NO WARRANTY”部分
C-h n	   view-emacs-news	   NEWS	                                        关于 Emacs 当前版本的最新更改的信息
C-h P	   view-emacs-problems	   PROBLEMS	                                Emacs 问题文件
C-h C-p	   describe-project	   THE-GNU-PROJECT	                        Richard Stallman 所写的、关于 GNU 工程的建立的文章
C-h t	   help-with-tutorial	   TUTORIAL	                                学习 Emacs 基础知识的实践教程

** 表 5. Emacs 帮助命令汇总

键盘输入	          函数	                   描述
                  apropos	           对于给定的正则表达式，这个命令将给出 apropos 命令和变量的列表。
                  open-dribble-file	   这个命令将打开指定的文件，并将所有键盘输入的副本保存到该文件。
Tab		                           这个命令将执行命令完成功能（如果给定了某个命令的部分内容），显示给定命令的所有可能的输入值。
command prefix
或者
keystroke C-h		                   对于给定的命令前缀 或者键盘输入，这个命令将描述所有可能命令和函数。
C-h C-c	          describe-copying	   这个命令可用于查看 GNU 通用公共许可证 (GNU GPL)。
C-h C-d	          describe-distribution	   这个命令可用于查看获得 Emacs 软件最新分发版的副本的信息。
C-h C-p	          describe-project	   这个命令可以查看 Richard Stallman 所撰写的关于 GNU 工程建立的文章。
C-h C-w	          describe-no-warranty	   这个命令可用于查看 GNU GPL 的“NO WARRANTY”部分。
C-h a regexp	  command-apropos	   对于给定的正则表达式，这个命令将给出 apropos 命令的列表。
C-h b	          describe-bindings	   这个命令将在一个新的帮助缓冲区窗口中描述当前主要模式的所有有效键绑定。
C-h c keystroke	  describe-key-briefly	   这个命令将在迷你缓冲区中报告与给定键盘输入 进行了绑定的函数的名称。
C-h F	          view-emacs-faq	   这个命令可用于查看 Emacs FAQ Info 文档。
C-h f function	  describe-function	   这个命令将在一个新的帮助缓冲区窗口中描述给定函数 的用途。
C-h k keystroke	  describe-key	           这个命令将打开一个新的帮助缓冲区窗口，其中描述了与给定键盘输入 进行绑定的函数。
C-h l	          view-lossage	           这个命令将打开一个新的缓冲区，并显示最后键入的 100 个字符。
C-h n	          view-emacs-news	   这个命令可用于查看关于 Emacs 当前版本的最新更改的信息。
C-h P	          view-emacs-problems	   这个命令可用于查看 Emacs 问题文件。
C-h t	          help-with-tutorial	   这个命令将打开一个学习 Emacs 基础知识的实践教程。
C-h v variable	  describe-variable	   这个命令将在一个新的帮助缓冲区窗口中描述给定变量 的用途。
C-h w function	  where-is                 这个命令将描述特定的函数所绑定到的键盘输入（如果有的话）。
