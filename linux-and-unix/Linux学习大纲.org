# Linux 学习大纲

前言：有网友在问答网站 Quora 上提问：“有哪些省时小技巧，是每个 Linux 用户都应该知道的？” 
Joshua Levy 平常就在 Linux 平台工作，并且他积累了不少实用命令行技巧，他在回复中精选出一部分。
对技术用户来说，这些技巧挺重要或实用，但知道的人并不多。
下文略有点长，一般来说，用户也不需要对全部内容都了解，
但为了达到省时方便的目的，Joshua Levy 仍不遗余力做了校对，以保证列出的每一条都值得一读，
前提是你是一位 Linux 重度用户。

为了获取文中提到的一个命令的更多信息，先试下“man <命令名称>”，在一些情况下，
为了让这条命令可以正常执行，你必须安装相应的包，可以用 aptitude 或者 yum。如果失败了，求助 Google。

* 基础篇

** 学习基础的 Bash。事实上，读整个的 bash 的帮助手册；很容易理解而且篇幅也不算长。其他一些可选的 shell 外观可能更漂亮，
但是 bash 功能很强大而且总是能用（主要学习 zsh 或者 tcsh 在很多情况下你会收到限制）。
** 学习 vim，对于 Linux 下的随机编辑，几乎没有工具能出其右（即使你大部分的时间里都在使用 Emacs 或者 Eclipse）。
** 了解 ssh，以及跳过每次登陆时密码验证的基础办法，通过 ssh-agent，ssh-add 等命令。
** 熟悉 bash 下的工作管理: &，Ctrl-Z，Ctrl-C，jobs，fg，bg，kill， 等等。
** 基础的文件管理：ls 以及 ls -l (特别的，学习”ls -l”中列出的每一列字段的含义)，less，head，tail，tail -f，
ln，ln -s (学习软链接和硬链接的区别)，chown，chmod，du（快速了解磁盘总体占用情况），df，mount。
** 基础的网络管理命令：ip 或者 ifconfig，dig。
** 了解正则表达式，以及 grep、egrep 的不同命令选项，-0，-A，-B 都值得了解一下。
** 学习使用 apt-get 或者 yum(取决于你的发行包)来找到并安装你需要的包.


* 日常使用篇

** 使用 bash 时，用 Ctrl-R 来搜索命令的历史记录。
** 使用 bash 时，用 Ctrl-W 来清除最后一个单词，使用 Ctrl-U 来清除整行。可以查看 man readline 
来获取 bash 里面默认键的绑定设置。内容很多。比如 Alt-.(注：点)遍历之前命令中使用过的参数，Alt-* 扩展了参数的匹配模式。
** 回到上次的工作目录：cd -。
** 如果你的命令敲到一半时改变了主意，可以用 Alt-#来在命令前面增加一个#，使之成为一行注释（或者使用 Ctrl-A 回到命令开头，然后再键入#）。
你可以之后再通过搜索历史记录回来。
** 使用 xargs（或者 parallel）。它非常强大。注意你能控制每一行(-L)执行多少项，也能控制如何并发（- P）。
如果你不太确定它会如你所愿的工作，先使用 xargs。 再者，-l{} 很有用。例如：

#+BEGIN_SRC bash -n -r
find . -name \*.py | xargs grep some_function
cat hosts | xargs -l{} ssh root@{} hostname
#+END_SRC

** pstree -p 可以很方便的显示整个进程树。
** 使用 pgrep 和 pkill 来通过名字来发现进程或者给进程发信号（-f 选项会有用）。
** 了解你能向进程发送的信号种类。比如，要挂起一个进程，使用 kill -STOP [进程 ID]。要了解整个列表，请参考 man 7 signal。
** 如果你想让一个后台进程一直运行，使用 nohup or disown。
** 通过 netstat -lntp 来检测哪些进程在监听。同样可以用 lsof。
** bash 脚本中，使用 set -x 来调试输出。使用 set -e 在有错误时终止时终止执行。要想严格输出错误，
可以考虑使用 set -o pipefail（虽然这个主题说起来有些复杂）。对于更复杂的脚本，也可以使用 trap。
** bash 脚本中，子 shell（通过写在括号里）是一种组织命令的方便的方法。一个很常见的例子是暂时移动到另外一个工作目录，例如：

#+BEGIN_SRC bash -n -r
#在当前目录下做一些事情
（cd /一些/另外的/目录；执行别的操作）
#继续在原来的目录下执行
#+END_SRC

** 要注意 bash 中有很多种变量表达式。检查一个变量是否存在：${name:?错误信息}。例如：如果一个 bash 脚本需要一个单变量，
只需要写 input_file=${1:?usage: $0 inpute_file}。数值扩展：i=$({(i+1)%5})。序列：{1..10}。
字符串的整理：${var%suffix} 和${var#prefix}。例如:

#+BEGIN_SRC bash -n -r
if var==foo.pdf, then echo ${var%.pdf}.txt   #会打印"foo.txt"。
#+END_SRC

** 通过 <(其他指令)，一条命令的输出可以被当作是一个文件的内容来对待。 例如，比较本地和远程的 /etc/hosts 文件，
可以用 diff /etc/hosts <(ssh [远程主机] cat /etc/hosts)。
** 了解 bash 中的“here documents”，比如 cat <<EOF …
** bash 中，通过 其他指令 > 日志文件 2>&1 把标准输出以及标准错误重定向。常见的情况是，
为了保证一条指令没有为标准输入留下一个打开的文件描述符，从而输出至你当前所在的终端，增加“</dev/null” 也是好的习惯。
** 用 man ascii 可以得到一个完整的 ASCII 表，有对应的 16 进制和 10 进制的值。
** 通过 ssh 连接远程终端时，使用 screen 或者 dtach 来保持你的 session，防止被打断。
在 ssh 中，了解如何使用-L 或者-D 选项（有时也会用到-R）会很有用处，比如，如果通过从一个远程的服务器访问一个网页。
** 优化你的 SSH 选项也可能管用。比如，下面的.ssh/config 内容在一些网络环境下可以防止连接掉线，
当连接到新主机时不需要再次确认，跳转验证，并且还使用了压缩（对在一些低宽带的连接环境下使用 scp 时会有帮助）。

#+BEGIN_SRC -n -r
TCPKeepAlive=yes
ServerAliveInterval=15
ServerAliveCountMax=6
StrictHostKeyChecking=no
Compression=yes
ForwardAgent=yes
#+END_SRC



* 数据处理篇

** 把 HTML 转成文本：lynx -dump 标准输入
** 如果要处理 XML，xmlstarlet 会很棒。
** 对于 Amazon S3，s3cmd 很方便（虽然还不太成熟，可能会有一些不太好的特性）。
** 了解 sort 以及 uniq（包括 uniq 的 -u 以及 -d 选项）。
** 了解 cut，paste，join 来操作文本文件。许多人使用 cut 但却忘了还有 join。
** 当你要在文件之间做集合的加，减，以及差运算时，用 sort/uniq 是非常方便的。假如 a 和 b 是两个已经去重的文本文件，
那么运算起来会很快，而且可以在任意大小的文件之间执行操作，甚至可以到 GB 字节大小。
（sort 不受内存限制，不过如果/tmp 在一个很小的 root 分区的话，你可能需要使用-T 选项）

#+BEGIN_SRC bash -n -r
cat a b | sort | uniq > c   # c is a union b
cat a b | sort | uniq -d > c   # c is a intersect b
cat a b b | sort | uniq -u > c   # c is set difference a - b
#+END_SRC

** 了解本地化会影响到许多命令行的工作，包括排序的顺序和性能。多数的 linux 安装包会把 LANG 或者
其他一些本地化的变量设置为类似美国英语的一个本地设置。这会让 sort 和其他一些命令运行起来慢很多。
（注意即使你使用 UTF-8 编码的文本，你仍然可以放心的通过 ASCII 码的顺序来排序，这一点用处很多）
为避免 i18n 拖慢日常的工作，使用传统的基于字节的排序顺序，使用 export LC_ALL=C（实际上，考虑在你的.bashrc 里加进去）。
** 了解基本的 AWK 和 sed 命令来做简单的数据处理。
例如：对一个文本文件的第三列的数字求和：awk ‘{x += $3} END {print x}’。
这大概比同等的 python 速度要快三倍并且代码长度也会简短 3 倍。
** 就地替换一个字符串在所有文件里所有出现的地方。

#+BEGIN_SRC bash -n -r
perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt
#+END_SRC

** 使用 shuf 来随机打乱一个文件中的行或者选择一个随机的行。
** 了解 sort 的各个选项。知道键值是如何工作的。特别是，当你要使用 -k1 时，要格外注意：1 只对第一个字段排序，-k1 则意味着根据整个行排序。
** 稳定排序（sort -s）可能会有用。例如，先根据第二个字段排序，再根据第一个字段排序时，你可以使用 sort -k1,1 | sort -s -k2,2
** 如果你需要在 bash 里的命令行里写入一个 tab 键的字面值的话，按 Ctrl+V, 或者$‘\t’ (后者更好，因为你可以复制、粘贴)。
** 对于二进制文件，使用 hd 来进行简单的导出 16 进制表示或者用 bvi 进行二进制的编辑。
** 对于二进制文件，strings（还有 grep 等等）可以让你发现文件的字节位（0101）.要对文件转编，可以试下 iconv，或者如果要使用更高级的用法，试试 uconv，它可以支持一些高级的 Unicode 方面的事情。比如，这条命令可以将重音都小写，并且去掉（通过扩展并且丢掉）:

#+BEGIN_SRC bash -n -r
uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt
#+END_SRC

** 要将文件切片，可以试试 split（根据大小切分）或者 csplit（根据模式切分）。



* 系统调试篇

** 对于 web 调试来说，curl 和 curl -l 会有用，以及和 wget 相同的那部分功能。
** 如果想了解磁盘/cpu/网络的状态，可以使用 iostat，netstat，top(更好一些的话，用 htop)，以及（尤其是）dstat，
对于想快速了解系统当前正在发生的事情，非常的方便。如果想了解内存当前的状态，可以使用 free 以及 vmstat，还要了解各项输出的含义。
特别值得一提的是，你要知道“cached”的数值是 linux 内核保留用来做文件缓存的空间的大小，所以真正可用的有效内存是“free”项的对应值。
** java 的系统调试则完全是另外一回事，但在 Sun 以及其他的 JVM 上有一个简单的技巧，就是你可以运行 kill -3 ,
得到一个完整的栈调用轨迹以及堆使用的总体情况（包括产生的垃圾回收细节，这里面包含有很多的信息），会被定向到标准错误或者日志。
** 使用 mtr 作为更好的网络追踪，识别网络存在的问题。
** 要查看一个磁盘是否是满的，ncdu 要比一般用的“du -sk *”要快。
** 要查看哪些 socket 或者进程在占用带宽，试试 iftop 或者 netlogs。
** ab 工具（随 apache 的安装包一起发布）对于检测网络服务器的性能很有帮助，对于更加复杂的压力测试，可以试下 siege。
对于更加严重的网络问题的调试，试试 wireshark 或者 tshark。了解 strace 和 ltrace。这在一个程序突然失败，挂掉，或者崩溃，
而你却不知所措，或者是你想知道程序的整体性能的情况时，会很有帮助。可以注意下-c 和-p 选项。
** 了解用 ldd 来检查共享库函数等的一些问题。
** 了解如何用 gdb 连接到一个正在运行的程序，并且得到它的调用堆栈。
** 使用/proc. 对于现场调试问题会很有帮忙。
例如：/proc/cpuinfo, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps。
** 当要调试过去一段时间内出现的问题时，sar 会有用，它可以显示过去一段时间内的 CPU，内存，网络的统计信息。
** 对于更深层次的系统性能优化，可以关注下 stap（systemtap）或者 perf。
** 当出现了一些很诡异的问题时，可以试下 dmesg（比如硬件或者驱动的问题）。

原文：[[http://www.quora.com/Linux/What-are-some-time-saving-tips-that-every-Linux-user-should-know][Linux: What are some time-saving tips that every Linux user should know?]]
转自：[[http://blog.jobbole.com/54425/][伯乐在线]] - [[http://blog.jobbole.com/author/kaulie/][高磊]]
